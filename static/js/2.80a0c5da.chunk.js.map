{"version":3,"sources":["structure/parser.yaml","App.yaml","tfw/view/input-date.yaml","presentational/stat.yaml","state/user.ts","state/organizations.ts","state/carecenters.ts","structure/index.ts","state/structures.ts","state/stats-config.ts","state/stats.ts","state/index.ts","service/organization.ts","service/carecenter.ts","structure/parser.ts","service/structure.ts","intl.ts","presentational/carecenter-header.tsx","tfw/layout/tabstrip.tsx","tfw/view/checkbox.tsx","tfw/view/input-date.tsx","presentational/stats-patients-config.tsx","container/stats-patients-config.ts","presentational/stats-config.tsx","container/stats-config.ts","dialog/stats-config.tsx","container/carecenter-header.tsx","presentational/pie.tsx","tfw/layout/flex.tsx","tfw/fileapi.ts","service/stat.ts","presentational/stat.tsx","tfw/layout/sidemenu.tsx","container/sidemenu.tsx","App.tsx","main.tsx"],"names":["module","exports","fr","err-1","err-2","err-3","en","cancel","code","consultations","consultations-count","create-stat","create-stat-consultation","create-stat-patient","date-min","date-max","logout","patients","patients-count","struct","invalid","month-0","month-1","month-2","month-3","month-4","month-5","month-6","month-7","month-8","month-9","month-10","month-11","export","ATTRIBUTES","Set","state_user","INITIAL_STATE","email","nickname","language","roles","reducer","state","action","type","startsWith","attName","substr","length","has","Error","concat","attValue","data","Object","assign","defineProperty","setLanguage","setNickname","state_organizations","organizations","slice","organization","newState","push","add","map","item","id","update","setOrganizations","addOrganization","updateOrganization","state_carecenters","carecenters","carecenter","setCarecenters","addCarecenter","updateCarecenter","src_structure","createPatientsFieldsFromStructure","structure","patientsFields","patientFields","forEach","patientField","createPatientsFieldsCaptionsFromStructure","patientsFieldsCaptions","Intl","toText","caption","getFieldCaption","key","charAt","formFields","state_structures","structures","setStructures","addStructure","updateStructure","stats_config","statsType","dateMin","today","Date","getFullYear","getMonth","getDate","getTime","lastMonth","dateMax","now","birthday","size","nationality","objectSpread","setType","date","setDateMin","setDateMax","fields","setPatientsFields","fieldName","castString","fieldVisibility","castBoolean","setPatientField","state_stats","stats","stat","addStat","user","User","Organizations","Carecenters","Structures","statsConfig","StatsConfig","Stats","store","createStore","arguments","undefined","console","log","carecenterId","find","c","structureId","s","Structure","initStatsConfig","h","hash","info","JSON","stringify","filter","sc","src_state","dispatch","service_organization","list","_list","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","WebService","exec","abrupt","sent","stop","apply","this","service_carecenter","organizationId","name","patientsCount","consultationsCount","_x","_","make","require","RX_LINE","parser","parse","types","levels","split","line","lineNumber","trim","level","computeLevel","pop","children","m","toUpperCase","tags","v","parseLine","ex","message","flattenFormsFields","forms","recursiveFlattenFormsFields","path","keys","child","sort","b","captionA","captionB","service_structure","parsePatient","patient","parseFormFields","exams","vaccins","sources","def","Parser","error","stringifiedPatientDef","raw","toIntl","result","fringe","shift","_arr","_i","value","CarecenterHeader","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleStatClick","bind","assertThisInitialized","handler","onStatClick","onStructClick","react","className","view_button","icon","small","onClick","enabled","handleStructClick","React","Tabstrip","handleChange","onChange","castArray","castInteger","headers","castStringArray","classes","toConsumableArray","react_default","createElement","join","header","index","Component","Checkbox","touchable","ref","Touchable","onTap","button","current","element","slot","label","wide","reverse","Input","inputDay","inputMonth","inputYear","Debouncer","day","parseInt","isNaN","month","year","setState","p","globalId","htmlFor","maxLength","min","max","defaultValue","monthId","handleFieldChange","handleDateMinChange","handleDateMaxChange","isSelected","onFieldChange","onDateMinChange","onDateMaxChange","captions","fieldsCaptions","input_date_Input","fieldCaption","checkbox_Checkbox","selected","connect","Actions","StatsPatientConfig","handleTypeChange","onTypeChange","tabstrip_Tabstrip","stats_patients_config","dialog_stats_config","show","dialog","Dialog","closeOnEscape","title","content","es","State","container_stats_config","footer","flat","hide","warning","StatsConfigDialog","DEFAULT_COLORS","Pie","canvas","paint","values","colors","width","radius","Math","floor","turn","PI","angleStep","total","reduce","acc","val","ctx","getContext","angle","angleTarget","lineTo","ang","sin","cos","save","clearRect","translate","fillStyle","globalAlpha","ellipse","fill","strokeStyle","lineWidth","i","color","beginPath","moveTo","closePath","stroke","restore","height","Flex","dir","style","justifyContent","alignItems","flexWrap","fileapi","blob","fileName","url","window","URL","createObjectURL","anchorElem","document","href","download","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","service_stat","extract","_extract","extraction","begin","convertTime","end","consultation","convertIntoOccurences","milliseconds","input","occurences","sum","occ","fieldValues","sortDescBySecondElement","A","Stat","selectedField","dataFromService","refresh","StatService","_getFieldsKeysAndValu","getFieldsKeysAndValues","output","fieldKey","idx","_ref","_ref2","slicedToArray","count","FileAPI","Blob","_this2","_getFieldsKeysAndValu2","indexOf","combo","pie_Pie","getValuesForPie","_ref3","_ref4","colorIndex","flex_Flex","background","animate","formatDate","array","B","d","sectors","Sidemenu","refMenu","createRef","handleShowChange","menu","Gesture","on","swipeleft","onShowChange","innerWidth","head","stat_Stat","container_carecenter_header","location","reload","onLanguageClick","onLogoutClick","App","container_sidemenu","__webpack_exports__","start","_start","_callee2","root","_context2","getElementById","ReactDOM","render","App_App","lang","ServiceOrganization","ServiceStructure","ServiceCarecenter","_x2"],"mappings":"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","file":"static/js/2.80a0c5da.chunk.js","sourcesContent":["module.exports = {\"fr\":{\"err-1\":\"Une ligne non vide et non commentée doit toujours commencer par au moins une astérisque pour indiquer le niveau hiérarchique.\",\"err-2\":\"<html>Vous avez sauté au moins un niveau hiérarchique:<br/><code>$1</code> !<br/><br/>Vous étiez au niveau <b>$2</b> et vous définissez maintenant le niveau <b>$3</b>.\",\"err-3\":\"<html>Vous avez déjà déclaré cet identifiant : <b>$1</b> !\"}}","module.exports = {\"en\":{\"cancel\":\"Cancel\",\"code\":\"Code:\",\"consultations\":\"Consultations\",\"consultations-count\":\"Consultations:\",\"create-stat\":\"Create Statistics\",\"create-stat-consultation\":\"Consult. Statistics\",\"create-stat-patient\":\"Patients Statistics\",\"date-min\":\"Start Date\",\"date-max\":\"End Date\",\"logout\":\"Logout\",\"patients\":\"Patients\",\"patients-count\":\"Patients:\",\"struct\":\"Structure:\"},\"fr\":{\"cancel\":\"Annuler\",\"code\":\"Code :\",\"consultations\":\"Consultations\",\"consultations-count\":\"Consultations :\",\"create-stat\":\"Créer des statistiques\",\"create-stat-consultation\":\"Stats consultations\",\"create-stat-patient\":\"Stats patients\",\"date-min\":\"Date de début\",\"date-max\":\"Date de fin\",\"logout\":\"Déconnexion\",\"patients\":\"Patients\",\"patients-count\":\"Patients :\",\"struct\":\"Structure :\"}}","module.exports = {\"en\":{\"invalid\":\"Invalid date!\",\"month-0\":\"Jan\",\"month-1\":\"Feb\",\"month-2\":\"Mar\",\"month-3\":\"Apr\",\"month-4\":\"May\",\"month-5\":\"Jun\",\"month-6\":\"Jul\",\"month-7\":\"Aug\",\"month-8\":\"Sep\",\"month-9\":\"Oct\",\"month-10\":\"Nov\",\"month-11\":\"Dec\"},\"fr\":{\"invalid\":\"Date invalide !\",\"month-0\":\"Jan\",\"month-1\":\"Fév\",\"month-2\":\"Mar\",\"month-3\":\"Avr\",\"month-4\":\"Mai\",\"month-5\":\"Jun\",\"month-6\":\"Jul\",\"month-7\":\"Aou\",\"month-8\":\"Sep\",\"month-9\":\"Oct\",\"month-10\":\"Nov\",\"month-11\":\"Déc\"}}","module.exports = {\"en\":{\"export\":\"Export to Spreadsheet\"},\"fr\":{\"export\":\"Exporter vers un tableur\"}}","import { IAction, IUser } from \"../types\"\n\nconst PREFIX = \"user:\";\nconst ATTRIBUTES = new Set(['nickname', 'language']);\n\nexport default {\n    INITIAL_STATE: { email: \"\", nickname: \"\", language: \"\", roles: [] },\n\n    reducer(state: IUser, action: IAction): IUser {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        const attName = action.type.substr(PREFIX.length);\n        if (!ATTRIBUTES.has(attName)) {\n            throw Error(`Unknown attribute \"${attName}\"!`);\n        }\n        const attValue = action.data;\n        return Object.assign(state, { [attName]: attValue });\n    },\n\n    setLanguage(language: string): IAction {\n        return { type: \"user:language\", data: language };\n    },\n\n    setNickname(nickname: string): IAction {\n        return { type: \"user:nickname\", data: nickname };\n    }\n}\n","import { IAction, IOrganization } from \"../types\"\n\nconst PREFIX = \"organization:\";\n\nexport default {\n    INITIAL_STATE: [],\n\n    reducer(state: IOrganization[], action: IAction): IOrganization[] {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        const command = action.type.substr(PREFIX.length);\n        switch (command) {\n            case \"set\": return set(state, action.organizations);\n            case \"add\": return add(state, action.organization);\n            case \"update\": return update(state, action.organization);\n            default: throw Error(`Unknown action \"${type}\"!`);\n        }\n    },\n\n    setOrganizations(organizations: IOrganization[]): IAction {\n        return { type: \"organization:set\", organizations };\n    },\n\n    addOrganization(organization: IOrganization): IAction {\n        return { type: \"organization:add\", organization };\n    },\n\n    updateOrganization(organization: IOrganization): IAction {\n        return { type: \"organization:update\", organization };\n    }\n}\n\nfunction set(state: IOrganization[], organizations: IOrganization[]): IOrganization[] {\n    return organizations.slice();\n}\n\nfunction add(state: IOrganization[], organization: IOrganization): IOrganization[] {\n    const newState = state.slice();\n    newState.push(organization);\n    return newState;\n}\n\n\nfunction update(state: IOrganization[], organization: IOrganization): IOrganization[] {\n    return state.map(item => item.id === organization.id ? organization : item);\n}\n","import { IAction, ICarecenter } from \"../types\"\n\nconst PREFIX = \"carecenter:\";\n\nexport default {\n    INITIAL_STATE: [],\n\n    reducer(state: ICarecenter[], action: IAction): ICarecenter[] {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        const command = action.type.substr(PREFIX.length);\n        switch (command) {\n            case \"set\": return set(state, action.carecenters);\n            case \"add\": return add(state, action.carecenter);\n            case \"update\": return update(state, action.carecenter);\n            default: throw Error(`Unknown action \"${type}\"!`);\n        }\n    },\n\n    setCarecenters(carecenters: ICarecenter[]): IAction {\n        return { type: \"carecenter:set\", carecenters };\n    },\n\n    addCarecenter(carecenter: ICarecenter): IAction {\n        return { type: \"carecenter:add\", carecenter };\n    },\n\n    updateCarecenter(carecenter: ICarecenter): IAction {\n        return { type: \"carecenter:update\", carecenter };\n    }\n}\n\nfunction set(state: ICarecenter[], carecenters: ICarecenter[]): ICarecenter[] {\n    return carecenters.slice();\n}\n\nfunction add(state: ICarecenter[], carecenter: ICarecenter): ICarecenter[] {\n    const newState = state.slice();\n    newState.push(carecenter);\n    return newState;\n}\n\nfunction update(state: ICarecenter[], carecenter: ICarecenter): ICarecenter[] {\n    return state.map(\n        item => item.id === carecenter.id ? Object.assign(item, carecenter) : item);\n}\n","import { IStructure, IPatientField } from \"../types\"\r\nimport Intl from \"../tfw/intl\"\r\n\r\nexport default {\r\n    createPatientsFieldsFromStructure(structure: IStructure): { [key: string]: boolean } {\r\n        const patientsFields : { [key: string]: boolean }= {};\r\n        structure.patientFields.forEach((patientField: IPatientField) => {\r\n            patientsFields[patientField.id] = true;\r\n        });\r\n        return patientsFields;\r\n    },\r\n\r\n    createPatientsFieldsCaptionsFromStructure(structure: IStructure): { [key: string]: string } {\r\n        const patientsFieldsCaptions : { [key: string]: string }= {};\r\n        structure.patientFields.forEach((patientField: IPatientField) => {\r\n            patientsFieldsCaptions[patientField.id] = Intl.toText(patientField.caption);\r\n        });\r\n        return patientsFieldsCaptions;\r\n    },\r\n\r\n    getFieldCaption(key:string, structure:IStructure) {\r\n        if( key.charAt(0) !== '#') return key;\r\n        const item: {caption: string, type: string}|undefined =\r\n         structure.formFields[key];\r\n        if( !item ) return key;\r\n        return Intl.toText(item.caption);\r\n    }\r\n}\r\n","import { IAction, IStructure } from \"../types\"\n\nconst PREFIX = \"structure:\";\n\nexport default {\n    INITIAL_STATE: [],\n\n    reducer(state: IStructure[], action: IAction): IStructure[] {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        const command = action.type.substr(PREFIX.length);\n        switch (command) {\n            case \"set\": return set(state, action.structures);\n            case \"add\": return add(state, action.structure);\n            case \"update\": return update(state, action.structure);\n            default: throw Error(`Unknown action \"${type}\"!`);\n        }\n    },\n\n    setStructures(structures: IStructure[]): IAction {\n        return { type: \"structure:set\", structures };\n    },\n\n    addStructure(structure: IStructure): IAction {\n        return { type: \"structure:add\", structure };\n    },\n\n    updateStructure(structure: IStructure): IAction {\n        return { type: \"structure:update\", structure };\n    }\n}\n\nfunction set(state: IStructure[], structures: IStructure[]): IStructure[] {\n    return structures.slice();\n}\n\nfunction add(state: IStructure[], structure: IStructure): IStructure[] {\n    const newState = state.slice();\n    newState.push(structure);\n    return newState;\n}\n\nfunction update(state: IStructure[], structure: IStructure): IStructure[] {\n    return state.map(\n        item => item.id === structure.id ? Object.assign(item, structure) : item);\n}\n","import { IAction, IStatsConfig } from \"../types\"\nimport castString from \"../tfw/converter/string\"\nimport castBoolean from \"../tfw/converter/boolean\"\n\nconst PREFIX = \"stats-config:\";\n\nexport default {\n    INITIAL_STATE: {\n        statsType: \"patients\",\n        dateMin: lastMonth(),\n        dateMax: today(),\n        patientsFields: {\n            birthday: true,\n            size: false,\n            nationality: true\n        },\n        patientsFieldsCaptions: {\n            birthday: \"Date de naissance\",\n            size: \"Taille\",\n            nationality: \"Nationalité\"\n        },\n        carecenter: {}\n    },\n\n    reducer(state: IStatsConfig, action: IAction): IStatsConfig {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        switch (action.type.substr(PREFIX.length)) {\n            case \"setType\": return setType(state, action);\n            case \"setDateMin\": return setDateMin(state, action);\n            case \"setDateMax\": return setDateMax(state, action);\r\n            case \"setPatientsFields\": return setPatientsFields(state, action);\r\n            case \"setPatientField\": return setPatientField(state, action);\r\n            default: throw Error(`Unknown action \"${type}\"!`);\r\n        }\n    },\n\n    setType(statsType: \"patients\" | \"consultations\"): IAction {\n        return { type: \"stats-config:setType\", statsType };\n    },\n\n    setDateMin(date:number): IAction {\n        return { type: \"stats-config:setDateMin\", date };\n    },\n\n    setDateMax(date:number): IAction {\n        return { type: \"stats-config:setDateMax\", date };\n    },\n\n    setPatientsFields(fields: { [key: string]: boolean }): IAction {\n        return { type: \"stats-config:setPatientsFields\", fields };\n    },\n\n    setPatientField(fieldName: string, fieldVisibility: boolean): IAction {\n        return { type: \"stats-config:setPatientField\", fieldName, fieldVisibility };\n    }\n}\n\nfunction setType(state: IStatsConfig, action: IAction): IStatsConfig {\n    return {\n        ...state,\n        statsType: action.statsType || \"patients\"\n    };\n}\n\nfunction setDateMin(state: IStatsConfig, action: IAction): IStatsConfig {\n    return {\n        ...state,\n        dateMin: action.date\n    };\n}\n\nfunction setDateMax(state: IStatsConfig, action: IAction): IStatsConfig {\n    return {\n        ...state,\n        dateMax: action.date\n    };\n}\n\nfunction setPatientsFields(state: IStatsConfig, action: IAction): IStatsConfig {\n    return {\n        ...state,\n        patientsFields: action.fields || {}\n    };\n}\n\nfunction setPatientField(state: IStatsConfig, action: IAction): IStatsConfig {\n    if (typeof action.fieldName !== 'string') {\n        throw Error(`action must have an attribute \"fieldName\" of type \"string\" but we found \"${typeof action.fieldName}\"`);\n    }\n    const fieldName: string = castString(action.fieldName, \"\");\n    const fieldVisibility: boolean = castBoolean(action.fieldVisibility, false);\n    return {\n        ...state,\n        patientsFields: {\n            ...state.patientsFields,\n            [fieldName]: fieldVisibility\n        }\n    };\n}\n\n\nfunction today() {\n    return Date.now();\n}\n\nfunction lastMonth() {\n    const today = new Date();\n    const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\n    return lastMonth.getTime();\n}\n","import { IAction, IStatsConfig } from \"../types\"\nimport castString from \"../tfw/converter/string\"\nimport castBoolean from \"../tfw/converter/boolean\"\n\nconst PREFIX = \"stats:\";\n\nexport default {\n    INITIAL_STATE: [],\n\n    reducer(state: IStatsConfig[], action: IAction): IStatsConfig[] {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        switch (action.type.substr(PREFIX.length)) {\n            case \"addStat\": return addStat(state, action);\n            default: throw Error(`Unknown action \"${type}\"!`);\r\n        }\n    },\n\n    addStat(stat: IStatsConfig): IAction {\n        return { type: \"stats:addStat\", stat };\n    }\n}\n\nfunction addStat(state: IStatsConfig[], action: IAction): IStatsConfig[] {\n    const stats = state.stats.slice();\n    stats.push( action.stat );\n    return stats;\n}\n","/**\n * The full state of the application is stored and managed here.\n */\nimport { createStore } from 'redux'\nimport User from \"./user\";\nimport Organizations from \"./organizations\"\nimport Carecenters from \"./carecenters\"\nimport Structure from \"../structure\"\nimport Structures from \"./structures\"\nimport StatsConfig from \"./stats-config\"\nimport Stats from \"./stats\"\nimport { IState, IAction, IStatsConfig } from \"../types\"\n\nfunction dispatch(action: IAction) {\n    store.dispatch(action);\n}\n\nconst INITIAL_STATE: IState = {\n    user: User.INITIAL_STATE,\n    organizations: Organizations.INITIAL_STATE,\n    carecenters: Carecenters.INITIAL_STATE,\n    structures: Structures.INITIAL_STATE,\n    statsConfig: StatsConfig.INITIAL_STATE,\n    stats: Stats.INITIAL_STATE\n};\n\nfunction reducer(state: IState | undefined = INITIAL_STATE, action: IAction): IState {\n    console.log(\"state =\", state);\n    switch (action.type) {\n        case \"initStatsConfig\": return initStatsConfig(state, action);\n        case \"addStat\": return addStat(state, action);\n        default: return {\n            user: User.reducer(state.user, action),\n            stats: Stats.reducer(state.stats, action),\n            organizations: Organizations.reducer(state.organizations, action),\n            carecenters: Carecenters.reducer(state.carecenters, action),\n            structures: Structures.reducer(state.structures, action),\n            statsConfig: StatsConfig.reducer(state.statsConfig, action)\n        };\n    }\n}\n\nconst store = createStore(reducer);\n\nfunction addStat(state: IState, action: IAction): IState {\n    const h = hash(state.statsConfig);\n    console.info(\"hash=\", hash, state.stats.map(s => JSON.stringify(s)));\n    const stats = state.stats.filter(s => hash(s) !== h);\n    stats.push({ ...state.statsConfig });\n    return { ...state, stats };\n}\n\nfunction hash(sc: IStatsConfig): string {\n    return `${sc.statsType}/${sc.dateMin}-${sc.dateMax}`;\n}\n\nfunction initStatsConfig(state: IState, action: IAction): IState {\n    const carecenterId = action.carecenterId;\n    const carecenter = state.carecenters.find(c => c.id === carecenterId);\n    if (!carecenter) {\n        throw Error(`There is no Carecenter with id=${carecenterId}!`);\n    }\n    const structureId = carecenter.structureId;\n    if (typeof structureId !== 'number') {\n        throw Error('Missing attribute number \"structureId\"!');\n    }\n    const structure = state.structures.find(s => s.id === structureId);\n    if (!structure) {\n        throw Error(`There is no structure with id ${structureId}!`);\n    }\n    return {\n        ...state,\n        statsConfig: {\n            ...state.statsConfig,\n            carecenter,\n            patientsFields: Structure.createPatientsFieldsFromStructure(structure),\n            patientsFieldsCaptions: Structure.createPatientsFieldsCaptionsFromStructure(structure)\n        }\n    }\n}\n\nexport default {\n    store, dispatch,\n\n    User, Organizations, Carecenters, Structures, StatsConfig,\n\n    initStatsConfig(carecenterId: number): IAction {\n        return { type: \"initStatsConfig\", carecenterId };\n    },\n    addStat(): IAction {\n        return { type: \"addStat\" };\n    }\n}\n","import WebService from \"../tfw/web-service\"\n\nexport default {\n    async list() {\n        return await WebService.exec(\"orga.list\");\n    }\n}\n","import WebService from \"../tfw/web-service\"\nimport { ICarecenter } from \"../types\"\n\ninterface IServiceCarecenter {\n    id: number;\n    name: string;\n    code: string;\n    patientsCount: number;\n    consultationsCount: number;\n    structure: number;\n}\n\nexport default {\n    async list( organizationId: number) : Promise<ICarecenter[]> {\n        const carecenters = await WebService.exec(\"carecenter.list\", organizationId);\n        return carecenters.map( (carecenter: IServiceCarecenter) => ({\n            id: carecenter.id,\n            name: carecenter.name,\n            code: carecenter.code,\n            patientsCount: carecenter.patientsCount,\n            consultationsCount: carecenter.consultationsCount,\n            structureId: carecenter.structure,\n            organizationId\n        }));\n    }\n}\n","import Intl from \"../tfw/intl\";\r\nconst _ = Intl.make(require(\"./parser.yaml\"));\r\n\r\n\r\n/**\r\n * Le fichier `types.org` définit tous  les types de données complexe.\r\n * Il  n'y a  pas  de type  très contraignant,  tous  les textes  sont\r\n * libres, mais on propose des listes pour faciliter la saisie. Chaque\r\n * élément  de cette  liste est  muni d'un  identifiant (précédé  d'un\r\n * dièse `#`).\r\n * Un type peut être hiérarchique. Par exemple, une adresse propose un\r\n * pays, une région,  un district, ... Les  propositions dépendent des\r\n * choix  précédents. Ainsi,  la liste  des propositions  de districts\r\n * dépend de la région sélectionnée.\r\n *\r\n * Le  parsing du  fichier `types.org`  se  fait ligne  par ligne.  On\r\n * ignore tous  les espaces/tabulations en  début de ligne.  Le nombre\r\n * d'astérisques  `*`  qui  commencent  une ligne  indique  le  niveau\r\n * hiérarchique.\r\n * Au  niveau 1,  on trouve  l'identifiant du  type qui  doit toujours\r\n * commencer par un dièse `#`.\r\n *\r\n * Voici un  exemple de  fichier en  entrée et de  comment on  doit le\r\n * traduire.\r\n * ```\r\n * #GENDER\r\n * * #H Homme\r\n * * #F Femme\r\n *\r\n * #LOCALIZATION\r\n * * Cameroun\r\n * ** Littoral\r\n * *** District 9\r\n * **** Village 1\r\n * **** Village 2\r\n * **** Village 3\r\n * *** Un peu plus loin\r\n * **** Village A\r\n * **** Village B\r\n * ** Centre\r\n * *** Pas tout près\r\n * **** Village Toto\r\n * *** Au fin fond du...\r\n * **** Village Alpha\r\n * **** Village Beta\r\n * **** Village Gama\r\n * ```\r\n *\r\n * ```\r\n * {\r\n *   \"#GENDER\": {\r\n *     \"#H\": { \"caption\": \"Homme\" },\r\n *     \"#F\": { \"caption\": \"Femme\" }\r\n *   },\r\n *   \"#LOCALIZATION\": {\r\n *     \"Cameroun\": { \"caption\": \"Cameroun\", \"children\": {\r\n *       \"Littoral\": { \"caption\": \"Littoral\", \"children\": {\r\n *         ...\r\n *       }},\r\n *       \"Centre\": { \"caption\": \"Centre\", \"children\": {\r\n *         ...\r\n *       }},\r\n *       ...\r\n *     }}\r\n *   }\r\n * }\r\n * ```\r\n */\r\n\r\n\r\nconst RX_LINE = /^(#[A-Z0-9-]+)?([^\\(@]*)(\\([^\\)]*\\)\\+?)?(@[A-Z0-9,-]+)?/;\r\n\r\n\r\nfunction parse(code: string) {\r\n    const types = {};\r\n    const levels = [types];\r\n    if (typeof code !== 'string') code = `${code}`;\r\n    code.split('\\n').forEach(function(line, lineNumber) {\r\n        try {\r\n            line = line.trim();\r\n            // Ignorer les lignes vides.\r\n            if (line.length === 0) return;\r\n            // Ignorer les commentaires.\r\n            if (line.substr(0, 2) === '//') return;\r\n            if (line.charAt(0) !== '*') throw _('err-1');\r\n\r\n            // Calculer le niveau hiérarchique `level`.\r\n            const level = computeLevel(line);\r\n            line = line.substr(level).trim();\r\n\r\n            if (level > levels.length) {\r\n                throw _('err-2', line, levels.length - 1, level);\r\n            }\r\n            while (levels.length > level) {\r\n                levels.pop();\r\n            }\r\n            const item = parseLine(line);\r\n            if (typeof levels[levels.length - 1][item.id] !== 'undefined') {\r\n                throw _('err-3', item.id);\r\n            }\r\n            levels[levels.length - 1][item.id] = item;\r\n            levels.push(item.children || {});\r\n        }\r\n        catch (ex) {\r\n            throw { lineNumber: lineNumber + 1, message: ex };\r\n        }\r\n    });\r\n    return types;\r\n};\r\n\r\n\r\n/**\r\n * @param   {string} line - Line to parse.\r\n * @returns {number} Number of leading '*' in the line.\r\n */\r\nfunction computeLevel(line: string): number {\r\n    let level = 0;\r\n    while (line.charAt(0) == '*') {\r\n        line = line.substr(1);\r\n        level++;\r\n    }\r\n    return level;\r\n}\r\n\r\n\r\nfunction parseLine(line: string) {\r\n    const item = { children: {} };\r\n    const m = RX_LINE.exec(line.trim());\r\n    if (m[2]) {\r\n        item.caption = m[2].trim();\r\n    }\r\n    if (m[1]) {\r\n        item.id = m[1].trim();\r\n    } else {\r\n        item.id = item.caption.toUpperCase();\r\n    }\r\n    if (m[3]) {\r\n        item.type = m[3].substr(1, m[3].length - 2).trim();\r\n    }\r\n    if (m[4]) {\r\n        item.tags = m[4].trim().substr(1).split(',').map(function(v) { return v.trim(); });\r\n    }\r\n    return item;\r\n}\r\n\r\n\r\n/**\r\n * @param {object} forms\r\n * {\r\n *   CONCLUSION: {\r\n *     caption: \"Conclusion\",\r\n *     children: {\r\n *       \"#SURGERY-GYN\": {\r\n *         caption: \"Chirurgie\",\r\n *         id: \"#SURGERY-GYN\",\r\n *         type: \"#SURGERY-GYN\"\r\n *       }\r\n *     }\r\n *   },\r\n *   ...\r\n * }\r\n * @return `[{ id:\"#SURGERY-GYN\", caption:\"Chirurgie\", path:[\"Conclusion\", \"Chirurgie\"] }, ...]`\r\n */\r\nfunction flattenFormsFields(forms) {\r\n    var list = [];\r\n    recursiveFlattenFormsFields(forms, list, []);\r\n    list.sort(function(a, b) {\r\n        var captionA = a.caption;\r\n        var captionB = b.caption;\r\n        if (captionA < captionB) return -1;\r\n        if (captionA > captionB) return +1;\r\n        return 0;\r\n    });\r\n    return list;\r\n}\r\n\r\n\r\nfunction recursiveFlattenFormsFields(children, list, path) {\r\n    Object.keys(children).forEach(function(key) {\r\n        var child = children[key];\r\n        if (typeof child.id === 'string' && child.id.charAt(0) === '#') {\r\n            // Leave.\r\n            list.push({\r\n                id: child.id,\r\n                caption: child.caption,\r\n                path: path.slice()\r\n            });\r\n        }\r\n        else if (child.children) {\r\n            // Node.\r\n            path.push(child.caption);\r\n            recursiveFlattenFormsFields(child.children, list, path);\r\n            path.pop();\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport default { parse, flattenFormsFields }\r\n","import WebService from \"../tfw/web-service\"\nimport Parser from \"../structure/parser\"\nimport Intl from \"../tfw/intl\"\nimport castString from \"../tfw/converter/string\"\nimport { IStructure, IPatientField } from \"../types\"\n\nexport interface IStructureService {\n    id: number;\n    name: string;\n    exams: string;\n    vaccins: string;\n    patient: string;\n    forms: string;\n    types: string;\n}\n\n\nexport default {\n    async list(organizationId: number) {\n        const structures: IStructureService[] =\n            await WebService.exec(\"structure.list\", organizationId);\n        return structures.map((structure: IStructureService) => (\r\n            {\n                id: structure.id,\n                organizationId,\n                name: structure.name,\n                patientFields: parsePatient(structure.patient),\n                formFields: parseFormFields(structure),\n                exams: parse(structure.exams),\n                vaccins: parse(structure.vaccins),\n                forms: parse(structure.forms),\n                types: parse(structure.types),\n                sources: {\n                    exams: structure.exams,\n                    vaccins: structure.vaccins,\n                    patient: structure.patient,\n                    forms: structure.forms,\n                    types: structure.types\n                }\n            }\r\n        ));\n    }\n}\n\n\nfunction parse(def: string) {\n    try {\n        return Parser.parse(def);\n    }\n    catch (ex) {\n        console.error(\"[parsePatient] \", ex);\n        console.log(def);\n    }\n    return null;\n}\n\nfunction parsePatient(stringifiedPatientDef: string): IPatientField[] {\n    try {\n        const raw = Parser.parse(stringifiedPatientDef);\n        const patients: IPatientField[] = Object.keys(raw).map((id: string) => {\n            const patient = raw[id];\n            return {\n                id,\n                type: patient.type,\n                caption: Intl.toIntl(patient.caption)\n            }\n        });\n        return patients;\n    }\n    catch (ex) {\n        console.error(\"[parsePatient] \", ex);\n    }\n    return [];\n}\n\ninterface IFlatField {\n    type: string;\n    caption: { [key: string]: string };\n}\n\nfunction parseFormFields(structure: IStructureService): { [key: string]: IFlatField } {\n    const result: { [key: string]: IFlatField } = {};\n    const fringe = [parse(structure.forms)];\n    while (fringe.length > 0) {\n        const item = fringe.shift();\n        for (const name of Object.keys(item)) {\n            const value = item[name];\n            result[name] = { caption: Intl.toIntl(value.caption) };\n            if (value.type) result[name].type = value.type;\n            if (value.children) {\n                fringe.push(value.children);\n            }\n        }\n    }\n    return result;\n}\n","import Intl from \"./tfw/intl\";\nexport default Intl.make(require(\"./App.yaml\"));\n","import * as React from \"react\"\nimport { ICarecenter, IStructure } from \"../types\"\nimport Button from \"../tfw/view/button\"\n\nimport \"./carecenter-header.css\"\nimport _ from \"../intl\";\n\n\ninterface ICarecenterHeaderProps {\n    carecenter: ICarecenter;\n    structures: IStructure[];\n    onStatClick: (carecenter: ICarecenter) => void;\n    onStructClick: (carecenter: ICarecenter) => void;\n}\n\nexport default class CarecenterHeader extends React.Component<ICarecenterHeaderProps, {}> {\n    constructor(props: ICarecenterHeaderProps) {\n        super(props);\n        this.handleStatClick = this.handleStatClick.bind(this);\n    }\n\n    handleStatClick() {\n        const handler = this.props.onStatClick;\n        if (typeof handler !== 'function') return;\n        handler(this.props.carecenter);\n    }\n\n    handleStructClick() {\n        const handler = this.props.onStructClick;\n        if (typeof handler !== 'function') return;\n        handler(this.props.carecenter);\n    }\n\n    render() {\n        const carecenter: ICarecenter = this.props.carecenter;\n        const structure: IStructure | undefined = this.props.structures.find(s => s.id === carecenter.structureId);\n\n        return (<div className=\"presentational-carecenter-header\">\n            <div>\n                <div className=\"name\">{carecenter.name}</div>\n                <div className=\"prop\">\n                    <div>{_(\"code\")}</div>\n                    <div>{carecenter.id}-{carecenter.code}</div>\n                </div>\n                <div className=\"prop\">\n                    <div>{_(\"patients-count\")}</div>\n                    <div>{carecenter.patientsCount}</div>\n                </div>\n                <div className=\"prop\">\n                    <div>{_(\"consultations-count\")}</div>\n                    <div>{carecenter.consultationsCount}</div>\n                </div>\n                <div className=\"prop\">\n                    <div>{_(\"struct\")}</div>\n                    <div>{structure ? structure.name : '...'}</div>\n                </div>\n            </div>\n            <div className=\"buttons\">\n                <Button icon=\"stat\" small={true} onClick={this.handleStatClick} /><br />\n                <Button icon=\"sitemap\" small={true}\n                    enabled={structure ? true : false}\n                    onClick={this.handleStructClick} />\n            </div>\n        </div>);\n    }\n}\n","import React from \"react\"\r\nimport castArray from \"../converter/array\"\r\nimport castInteger from \"../converter/integer\"\r\nimport castStringArray from \"../converter/string-array\"\r\n\r\nimport \"./tabstrip.css\"\r\n\r\ninterface ITabstripProps {\r\n    value: number;\r\n    headers: string[];\r\n    classes?: string | string[];\r\n    children: React.ReactElement<any>[];\r\n    onChange?: (value: number) => void;\r\n}\r\n\r\nexport default class Tabstrip extends React.Component<ITabstripProps, {}> {\r\n    constructor(props: ITabstripProps) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(value: number) {\r\n        const handler = this.props.onChange;\r\n        if (typeof handler !== 'function') return;\r\n        console.info(\"value=\", value);\r\n        handler(value);\r\n    }\r\n\r\n    render() {\r\n        const children = castArray(this.props.children);\r\n        const value = castInteger(this.props.value, 0);\r\n        const headers = castStringArray(this.props.headers);\r\n        const child = children[value];\r\n        const handler = this.handleChange;\r\n        const classes = [\"tfw-layout-tabstrip\"];\r\n        classes.push(...castStringArray(this.props.classes));\r\n\r\n        return (\r\n            <div className={classes.join(\" \")}>\r\n                <header>\r\n                    {\r\n                        headers.map((header: string, index: number) => (\r\n                            <button\r\n                                key={index}\r\n                                onClick={() => handler(index)}\r\n                                className={value === index ? \"selected thm-bg2\" : \"\"}>{\r\n                                    header\r\n                                }</button>\r\n                        ))\r\n                    }\r\n                    <div className=\"void\" />\r\n                </header>\r\n                <div className=\"thm-bg2\">{child}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport Touchable from \"../behavior/touchable\"\nimport \"./checkbox.css\";\n\nimport castString from \"../converter/string\"\nimport castBoolean from \"../converter/boolean\"\n\n\ninterface IBooleanSlot {\n    (value: boolean): void;\n}\n\ninterface ICheckboxProps {\n    value?: boolean;\n    label?: string;\n    wide?: boolean;\n    reverse?: boolean;\n    onChange?: IBooleanSlot\n}\n\nexport default class Checkbox extends React.Component<ICheckboxProps, {}> {\n    readonly touchable: Touchable;\n    readonly ref;\n\n    constructor(props: ICheckboxProps) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.touchable = new Touchable({ onTap: this.handleChange });\n        this.ref = React.createRef();\n    }\n\n    componentDidMount() {\n        const button = this.ref.current;\n        if (button) this.touchable.element = button;\n    }\n\n    private handleChange(): void {\n        const slot = this.props.onChange;\n        if (typeof slot === 'function') {\n            const value = castBoolean(this.props.value, false);\n            slot(!value);\n        }\n    }\n\n    render() {\n        const label = castString(this.props.label, \"\");\n        const value = castBoolean(this.props.value, false);\n        const wide = castBoolean(this.props.wide, false);\n        const reverse = castBoolean(this.props.reverse, false);\n        const classes = [\"tfw-view-checkbox\"];\n        if (value) classes.push(\"ok\");\n        if (wide) classes.push(\"wide\");\n        if (reverse) classes.push(\"reverse\");\n\n        return (<button ref={this.ref} className={classes.join(\" \")} >\n            <div className=\"pin\" >\n                <div className={`thm-ele-button bar ${value ? \"thm-bgSL\" : \"thm-bg1\"}`}> </div>\n                <div className={`thm-ele-button btn ${value ? \"thm-bgS\" : \"thm-bg0\"}`\r\n                }> </div>\n            </div>\n            <label >{label}</label>\n        </button>);\n    }\n}\n","import * as React from \"react\"\nimport \"../theme.css\"\nimport \"./input-date.css\"\nimport castInteger from \"../converter/integer\"\nimport castBoolean from \"../converter/boolean\"\nimport castString from \"../converter/string\"\nimport Debouncer from \"../debouncer\"\n\nimport Intl from \"../intl\"\nconst _ = Intl.make(require(\"./input-date.yaml\"));\n\ninterface INumberSlot {\n    (value: number): void;\n}\n\ninterface IInputProps {\n    label?: string;\n    value?: number;\n    wide?: boolean;\n    focus?: boolean;\n    onChange?: INumberSlot\n}\n\ninterface IInputState {\n    error?: string;\n}\n\nexport default class Input extends React.Component<IInputProps, IInputState> {\n    readonly inputDay: React.RefObject<HTMLInputElement>;\n    readonly inputMonth: React.RefObject<HTMLSelectElement>;\n    readonly inputYear: React.RefObject<HTMLInputElement>;\n\n    constructor(props: IInputProps) {\n        super(props);\n        this.state = {};\n        this.handleChange = Debouncer(this.handleChange.bind(this), 300);\n        this.inputDay = React.createRef();\n        this.inputMonth = React.createRef();\n        this.inputYear = React.createRef();\n    }\n\n    handleChange(): void {\n        try {\n            const day = parseInt(this.inputDay.current.value);\n            if (isNaN(day)) throw \"day is not a number!\";\n            const month = parseInt(this.inputMonth.current.value);\n            if (isNaN(month)) throw \"month is not a number!\";\n            const year = parseInt(this.inputYear.current.value);\n            if (isNaN(year)) throw \"year is not a number!\";\n\n            const date = new Date(year, month, day);\n            if (date.getFullYear() !== year || date.getMonth() !== month || date.getDate() !== day) {\n                throw \"Invalid date!\";\n            }\n            this.setState({ error: \"\" });\n\n            const handler = this.props.onChange;\n            if (typeof handler !== 'function') return;\n            handler(date.getTime());\n        }\n        catch (ex) {\n            this.setState({ error: _(\"invalid\") });\n        }\n    }\n\n    render() {\n        const\n            p = this.props,\n            label = castString(p.label, \"\"),\n            value = castInteger(p.value, 0),\n            wide = castBoolean(p.wide, false),\n            error = castString(this.state.error, \"\"),\n            date = new Date(value),\n            id = nextId();\n        const classes = [\"tfw-view-input-date\", \"thm-ele-button\"];\n        if (wide) classes.push(\"wide\");\n        const header = (error.length > 0 ? <div className=\"thm-bgSD error\">{error}</div> :\n            (label ? (<label htmlFor={id} className=\"thm-bgPD\">{label}</label>) : null));\n        return (<div className={classes.join(\" \")} >\n            {header}\n            <div className=\"inputs\">\n                <input\n                    ref={this.inputDay}\n                    className=\"day\"\n                    type=\"number\"\n                    maxLength=\"2\"\n                    min=\"1\"\n                    max=\"31\"\n                    id={id}\n                    size=\"2\"\n                    onChange={this.handleChange}\n                    defaultValue={date.getDate()} />\n                <select ref={this.inputMonth}\n                    onChange={this.handleChange}\n                    defaultValue={date.getMonth()}>{\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(monthId => (\n                            <option key={monthId} value={monthId}>{_(`month-${monthId}`)}</option>\n                        ))\n                    }</select>\n                <input\n                    ref={this.inputYear}\n                    className=\"year\"\n                    type=\"number\"\n                    maxLength=\"4\"\n                    size=\"4\"\n                    onChange={this.handleChange}\n                    defaultValue={date.getFullYear()} />\n            </div>\n        </div>);\n    }\n}\n\n\nlet globalId = 0;\nfunction nextId() {\n    return `tfw-view-input-${globalId++}`;\n}\n\n\nconst NUMBER_VALIDATOR = (value: string) => isNaN(parseFloat(value)) ? _('nan') : true;\n","import React from \"react\"\r\nimport Checkbox from \"../tfw/view/checkbox\"\r\nimport InputDate from \"../tfw/view/input-date\"\r\nimport Flex from \"../tfw/layout/flex\"\r\nimport castInteger from \"../tfw/converter/integer\"\r\n\r\nimport _ from \"../intl\"\r\n\r\ninterface IStatsPatientsConfigProps {\r\n    fields: {\r\n        [key: string]: boolean;\r\n    };\r\n    fieldsCaptions: {\r\n        [key: string]: string;\r\n    }\r\n    dateMin?: Date;\r\n    dateMax?: Date;\r\n    onFieldChange?: (fieldName: string, isSelected: boolean) => void;\r\n    onDateMinChange?: (date: Date) => void;\r\n    onDateMaxChange?: (date: Date) => void;\r\n}\r\n\r\nexport default class StatsConfig extends React.Component<IStatsPatientsConfigProps, {}> {\r\n    constructor(props: IStatsPatientsConfigProps) {\r\n        super(props);\r\n        this.handleFieldChange = this.handleFieldChange.bind(this);\r\n        this.handleDateMinChange = this.handleDateMinChange.bind(this);\r\n        this.handleDateMaxChange = this.handleDateMaxChange.bind(this);\r\n    }\r\n\r\n    handleFieldChange(fieldName: string, isSelected: boolean) {\r\n        const handler = this.props.onFieldChange;\r\n        if (typeof handler !== 'function') return;\r\n        try {\r\n            handler(fieldName, isSelected);\r\n        } catch (ex) {\r\n            console.error(\"Error in handleFieldChange(fieldName, isSelected): \", fieldName, isSelected);\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    handleDateMinChange(date: Date) {\r\n        const handler = this.props.onDateMinChange;\r\n        if (typeof handler !== 'function') return;\r\n        try {\r\n            handler(date);\r\n        } catch (ex) {\r\n            console.error(\"Error in handleDateMinChange(date): \", date);\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    handleDateMaxChange(date: Date) {\r\n        const handler = this.props.onDateMaxChange;\r\n        if (typeof handler !== 'function') return;\r\n        try {\r\n            handler(date);\r\n        } catch (ex) {\r\n            console.error(\"Error in handleDateMaxChange(date): \", date);\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const p = this.props;\r\n        const fields = p.fields;\r\n        const captions = p.fieldsCaptions;\r\n        const handleFieldChange = this.handleFieldChange;\r\n        const dateMin = castInteger(p.dateMin, Date.now());\r\n        const dateMax = castInteger(p.dateMax, Date.now());\r\n\r\n        return (\r\n            <div>\r\n                <div><InputDate\r\n                    label={_(\"date-min\")}\r\n                    onChange={this.handleDateMinChange}\r\n                    value={dateMin} /></div>\r\n                <div><InputDate\r\n                    label={_(\"date-max\")}\r\n                    onChange={this.handleDateMaxChange}\r\n                    value={dateMax} /></div>\r\n                <div>{\r\n                    Object.keys(fields).map((fieldName: string) => {\r\n                        const fieldCaption = captions[fieldName];\r\n                        if (typeof fieldCaption !== 'string') return null;\r\n                        const isSelected = fields[fieldName];\r\n                        return <Checkbox wide={true}\r\n                            key={fieldName}\r\n                            value={isSelected}\r\n                            label={fieldCaption}\r\n                            onChange={(selected: boolean) => handleFieldChange(fieldName, selected)} />\r\n                    })\r\n                }</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { connect } from 'react-redux'\nimport StatsPatientConfig from \"../presentational/stats-patients-config\"\nimport Actions from \"../state/stats-config\"\nimport { IState, IDispatchFunction } from \"../types\"\n\nfunction mapStateToProps(state: IState) {\n    return {\n        fields: state.statsConfig.patientsFields,\n        fieldsCaptions: state.statsConfig.patientsFieldsCaptions\n    }\n}\n\nfunction mapDispatchToProps(dispatch: IDispatchFunction) {\n    return {\n        onFieldChange(fieldName: string, isSelected: boolean) {\n            dispatch(Actions.setPatientField(fieldName, isSelected));\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatsPatientConfig);\n","import React from \"react\"\r\nimport castArray from \"../tfw/converter/array\"\r\nimport castString from \"../tfw/converter/string\"\r\nimport castInteger from \"../tfw/converter/integer\"\r\nimport Tabstrip from \"../tfw/layout/tabstrip\"\r\nimport StatsPatientsConfig from \"../container/stats-patients-config\"\r\nimport { IStatsConfig } from \"../types\"\r\nimport _ from \"../intl\"\r\n\r\ninterface IStatsConfigProps extends IStatsConfig {\r\n    onTypeChange?: (type: string) => void;\r\n    onDateMinChange?: (date: number) => void;\r\n    onDateMaxChange?: (date: number) => void;\r\n}\r\n\r\nexport default class StatsConfig extends React.Component<IStatsConfigProps, {}> {\r\n    constructor(props: IStatsConfigProps) {\r\n        super(props);\r\n        this.handleTypeChange = this.handleTypeChange.bind(this);\r\n        this.handleDateMinChange = this.handleDateMinChange.bind(this);\r\n        this.handleDateMaxChange = this.handleDateMaxChange.bind(this);\r\n    }\r\n\r\n    handleTypeChange(index: number) {\r\n        const handler = this.props.onTypeChange;\r\n        if (typeof handler !== 'function') return;\r\n        handler(index === 0 ? 'patients' : 'consultations');\r\n    }\r\n\r\n    handleDateMinChange(date: number) {\r\n        const handler = this.props.onDateMinChange;\r\n        if (typeof handler !== 'function') return;\r\n        handler(date);\r\n    }\r\n\r\n    handleDateMaxChange(date: number) {\r\n        const handler = this.props.onDateMaxChange;\r\n        if (typeof handler !== 'function') return;\r\n        handler(date);\r\n    }\r\n\r\n    render() {\r\n        const p = this.props;\r\n        const type = castString(p.statsType, \"patients\");\r\n        const value = type === \"patients\" ? 0 : 1;\r\n        const dateMin = castInteger(p.dateMin, Date.now());\r\n        const dateMax = castInteger(p.dateMax, Date.now());\r\n\r\n        return (\r\n            <Tabstrip\r\n                value={value}\r\n                headers={[_(\"patients\"), _(\"consultations\")]}\r\n                onChange={this.handleTypeChange}\r\n            >\r\n                <StatsPatientsConfig\r\n                    dateMin={dateMin}\r\n                    dateMax={dateMax} />\r\n                <div>Not implemented yet!</div>\r\n            </Tabstrip>\r\n        )\r\n    }\r\n}\r\n","import { connect } from 'react-redux'\nimport StatsConfig from \"../presentational/stats-config\"\nimport Actions from \"../state/stats-config\"\nimport { IState, IDispatchFunction } from \"../types\"\n\nfunction mapStateToProps(state: IState) {\n    return {\n        statsType: state.statsConfig.statsType,\n        dateMin: state.statsConfig.dateMin,\n        dateMax: state.statsConfig.dateMax\n    }\n}\n\nfunction mapDispatchToProps(dispatch: IDispatchFunction) {\n    return {\n        onTypeChange(type: \"patients\" | \"consultations\") {\n            dispatch(Actions.setType(type));\n        },\n\n        onDateMinChange(date: number) {\n            dispatch(Actions.setDateMin(date));\n        },\n\n        onDateMaxChange(date: number) {\n            dispatch(Actions.setDateMax(date));\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatsConfig);\n","import * as React from \"react\"\r\nimport { Provider } from 'react-redux'\r\nimport State from \"../state\"\r\nimport StatsConfig from \"../container/stats-config\"\r\nimport Dialog from \"../tfw/factory/dialog\"\r\nimport Button from \"../tfw/view/button\"\r\n\r\nimport _ from \"../intl\"\r\n\r\nexport default {\r\n    show() {\r\n        const dialog = Dialog.show({\r\n            closeOnEscape: true,\r\n            icon: \"stat\",\r\n            title: _(\"create-stat\"),\r\n            content: (<Provider store={State.store}><StatsConfig /></Provider>),\r\n            footer: [\r\n                <Button\r\n                    key=\"cancel\"\r\n                    label={_(\"cancel\")}\r\n                    flat={true}\r\n                    onClick={() => dialog.hide()} />,\r\n                <Button\r\n                    key=\"ok\"\r\n                    label={_(\"create-stat\")}\r\n                    warning={true}\r\n                    onClick={() => {\r\n                        dialog.hide();\r\n                        State.dispatch(State.addStat());\r\n                    }} />\r\n            ]\r\n        });\r\n\r\n    }\r\n}\r\n","import { connect } from 'react-redux'\nimport CarecenterHeader from \"../presentational/carecenter-header\"\nimport { IState, ICarecenter, IDispatchFunction } from \"../types\"\nimport State from \"../state\"\nimport StatsConfigDialog from \"../dialog/stats-config\"\n\nfunction mapStateToProps(state: IState) {\n    return {}\n}\n\nfunction mapDispatchToProps(dispatch: IDispatchFunction) {\n    return {\n        onStatClick(carecenter: ICarecenter) {\n            console.log(\"carecenter=\", carecenter);\n            dispatch(State.initStatsConfig(carecenter.id));\n            StatsConfigDialog.show();\n        },\n\n        onStructClick(carecenter: ICarecenter) {\n            console.log(\"carecenter=\", carecenter);\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CarecenterHeader);\n","import * as React from \"react\"\r\nimport castArray from \"../tfw/converter/array\"\r\nimport castInteger from \"../tfw/converter/integer\"\r\nimport \"./pie.css\"\r\n\r\ninterface IPieProps {\r\n    values: number[];\r\n    colors?: string[];\r\n    size?: number;\r\n}\r\ninterface IPieState { }\r\n\r\nconst DEFAULT_COLORS = [\"#b37036\", \"#cc7529\", \"#e67717\", \"#ff7700\", \"#765\"];\r\n\r\nexport default class Pie extends React.Component<IPieProps, IPieState> {\r\n    private readonly canvas: React.RefObject<HTMLCanvasElement> = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.paint();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.paint();\r\n    }\r\n\r\n    paint() {\r\n        if (!this.canvas.current) return;\r\n        const\r\n            canvas: HTMLCanvasElement = this.canvas.current,\r\n            values = this.props.values,\r\n            colors = castArray(this.props.colors, DEFAULT_COLORS).slice(),\r\n            size = canvas.width,\r\n            lineWidth = 1,\r\n            radius = Math.floor(size / 2) - 3,\r\n            turn = 2 * Math.PI,\r\n            angleStep = turn / size,\r\n            total = this.props.values.reduce((acc, val) => val + acc),\r\n            ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) return;\r\n        let\r\n            angle = 0,\r\n            angleTarget = 0;\r\n\r\n        const lineTo = (ang: number) => ctx.lineTo(radius * Math.sin(ang), -radius * Math.cos(ang));\r\n\r\n        ctx.save();\r\n        ctx.clearRect(0, 0, size, size);\r\n        if (total > 0) {\r\n            ctx.translate(size / 2, size / 2);\r\n            ctx.fillStyle = \"#000\";\r\n            ctx.globalAlpha = 0.5;\r\n            ctx.ellipse(0, 0, size / 2, size / 2, 0, 0, Math.PI * 2);\r\n            ctx.fill();\r\n            ctx.strokeStyle = \"#000\";\r\n            ctx.lineWidth = lineWidth;\r\n            for (let i = 0; i < colors.length; i++) {\r\n                const color = colors[i % colors.length];\r\n                ctx.fillStyle = color;\r\n                ctx.beginPath();\r\n                ctx.moveTo(0, 0);\r\n                angleTarget = angle + turn * values[i] / total;\r\n                do {\r\n                    lineTo(angle);\r\n                    angle += angleStep;\r\n                } while (angle < angleTarget)\r\n                lineTo(angleTarget);\r\n                angle = angleTarget;\r\n                ctx.closePath();\r\n                ctx.globalAlpha = 1;\r\n                ctx.fill();\r\n                ctx.globalAlpha = 0.2;\r\n                ctx.stroke();\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    render() {\r\n        const p = this.props;\r\n        const colors = castArray(p.colors, DEFAULT_COLORS);\r\n        const size = castInteger(p.size, 200);\r\n\r\n        return (\r\n            <canvas\r\n                ref={this.canvas}\r\n                width={size} height={size}\r\n                className=\"presentation-pie\">\r\n            </canvas>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\"\nimport castString from \"../converter/string\"\nimport castBoolean from \"../converter/boolean\"\nimport castStringArray from \"../converter/string-array\"\nimport \"./flex.css\"\n\ninterface IFlexProp {\n    wide?: boolean;\n    classes?: string[] | string;\n    dir?: \"row\" | \"row-reverse\" | \"column\" | \"column-reverse\" | \"wide\" | \"narrow\";\n    wrap?: \"nowrap\" | \"wrap\" | \"wrap-reverse\";\n    justifyContent?: \"flex-start\" | \"flex-end\" | \"center\" | \"space-around\" | \"space-between\" | \"space-evenly\";\n    alignItems?: \"stretch\" | \"flex-start\" | \"flex-end\" | \"center\";\n    children: React.ReactElement<any>[] | React.ReactElement<any>;\n}\n\nexport default class Flex extends React.Component<IFlexProp, {}> {\n    render() {\n        const p = this.props;\n        const wide = castBoolean(p.wide, true);\n        const dir = castString(p.dir, \"row\");\n        const style: React.CSSProperties = {\n            justifyContent: castString(p.justifyContent, \"space-around\"),\n            alignItems: castString(p.alignItems, \"center\"),\n            flexWrap: castString(p.wrap, \"wrap\")\n        };\n        const classes = [\"tfw-view-flex\", `dir-${dir}`];\n        classes.push(...castStringArray(p.classes));\n\n        if (wide) classes.push(\"wide\");\n\n        return (\n            <div className={classes.join(\" \")} style={style}>{\n                p.children\n            }</div>\n        )\n    }\n}\n","export default {\n    saveAs(blob: Blob, fileName: string) {\n        const url = window.URL.createObjectURL(blob);\n        const anchorElem = document.createElement(\"a\");\n\n        anchorElem.style = \"display: none\";\n        anchorElem.href = url;\n        anchorElem.download = fileName;\n\n        document.body.appendChild(anchorElem);\n        anchorElem.click();\n\n        document.body.removeChild(anchorElem);\n\n        // On Edge, revokeObjectURL should be called only after\n        // a.click() has completed, atleast on EdgeHTML 15.15048\n        setTimeout(function() {\n            window.URL.revokeObjectURL(url);\n        }, 1000);\n    }\n}\n","import WebService from \"../tfw/web-service\"\r\nimport { IStatsConfig, IOccurences, IOccurence } from \"../types\"\r\n\r\ninterface IServiceExtract {\r\n    patients: {};\r\n    data: {};\r\n}\r\n\r\ninterface IOccurencesDictionary {\r\n    [key: string]: { [key: string]: number }\r\n}\r\n\r\nexport default {\r\n    async extract(statsConfig: IStatsConfig): Promise<{}> {\r\n        const extraction = await WebService.exec(\"extract\", {\r\n            carecenter: statsConfig.carecenter.id,\r\n            begin: convertTime(statsConfig.dateMin),\r\n            end: convertTime(statsConfig.dateMax)\r\n        });\r\n        const result = {};\r\n        Object.values(extraction.data).forEach(consultation => {\r\n            Object.keys(consultation)\r\n                .filter(key => key.charAt(0) === '#')\r\n                .forEach(key => {\r\n                    const val = consultation[key];\r\n                    if (typeof result[key] === 'undefined') {\r\n                        result[key] = {};\r\n                    }\r\n                    const item = result[key];\r\n                    const occurences = item[val];\r\n                    if (typeof occurences === 'undefined') {\r\n                        item[val] = 1;\r\n                    } else {\r\n                        item[val]++;\r\n                    }\r\n                })\r\n        })\r\n        return convertIntoOccurences(result);\r\n    }\r\n}\r\n\r\n/**\r\n * Convert a number of milliseconds into a number of seconds.\r\n */\r\nfunction convertTime(milliseconds: number): number {\r\n    return Math.floor(.5 + milliseconds * 0.001);\r\n}\r\n\r\n\r\nfunction convertIntoOccurences(input: IOccurencesDictionary): { [key: string]: IOccurences } {\r\n    const result: { [key: string]: IOccurences } = {};\r\n    Object.keys(input).forEach(fieldName => {\r\n        const occurences = { sum: 0, occ: [] };\r\n        result[fieldName] = occurences;\r\n        const fieldValues = input[fieldName];\r\n        Object.keys(fieldValues).forEach(value => {\r\n            const occ = fieldValues[value];\r\n            occurences.sum += occ;\r\n            occurences.occ.push([value, occ]);\r\n        })\r\n        occurences.occ.sort(sortDescBySecondElement);\r\n    })\r\n    return result;\r\n}\r\n\r\n\r\nfunction sortDescBySecondElement(a: IOccurence, b: IOccurence): number {\r\n    const\r\n        A = a[1],\r\n        B = b[1];\r\n    return B - A;\r\n}\r\n","import * as React from \"react\"\r\nimport { IStatsConfig, IStructure, IOccurences } from \"../types\"\r\nimport Pie from \"./pie\"\r\nimport Flex from \"../tfw/layout/flex\"\r\nimport Icon from \"../tfw/view/icon\"\r\nimport Combo from \"../tfw/view/combo\"\r\nimport Button from \"../tfw/view/button\"\r\nimport FileAPI from \"../tfw/fileapi\"\r\nimport Structure from \"../structure\"\r\nimport StatService from \"../service/stat\"\r\n\r\nimport Intl from \"../tfw/intl\"\r\nconst _ = Intl.make(require(\"./stat.yaml\"));\r\n\r\nimport \"./stat.css\"\r\n\r\nconst DEFAULT_COLORS = [\"#b37036\", \"#cc7529\", \"#e67717\", \"#ff7700\", \"#765\"];\r\n\r\ntype TDataFromService = { [key: string]: IOccurences };\r\n\r\ninterface IStatProps {\r\n    stat: IStatsConfig;\r\n    structure: IStructure;\r\n}\r\n\r\ninterface IStatState {\r\n    dataFromService?: TDataFromService;\r\n    selectedField: string;\r\n}\r\n\r\nexport default class Stat extends React.Component<IStatProps, IStatState> {\r\n    constructor(props: IStatProps) {\r\n        super(props);\r\n        this.state = { selectedField: \"\" };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.dataFromService) return;\r\n        console.log(\"componentDidUpdate\");\r\n        this.refresh();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"componentDidMount\");\r\n        this.refresh();\r\n    }\r\n\r\n    async refresh() {\r\n        const dataFromService = await StatService.extract(this.props.stat);\r\n        console.info(\"data=\", dataFromService);\r\n        this.setState({ dataFromService });\r\n    }\r\n\r\n    private export() {\r\n        const data: TDataFromService | undefined = this.state.dataFromService;\r\n        if (!data) return;\r\n        const { keys, values } = getFieldsKeysAndValues(data, this.props.structure);\r\n        const output: string[] = [\"Code du champ\\tNom du champ\\tValeur\\tOccurences\"];\r\n        keys.forEach((fieldKey: string, idx: number) => {\r\n            const fieldCaption = values[idx];\r\n            const occurences = data[fieldKey].occ;\r\n            occurences.forEach(([caption, count]: [string, number]) => {\r\n                output.push(`${fieldKey}\\t${fieldCaption}\\t${caption}\\t${count}`);\r\n            })\r\n        });\r\n\r\n        const filename = \"statistics.xls\";\r\n        FileAPI.saveAs(new Blob([output.join(\"\\n\")], { type: \"text/csv\" }), filename);\r\n    }\r\n\r\n    render() {\r\n        const data: TDataFromService | undefined = this.state.dataFromService;\r\n        let content = null;\r\n        if (!data) {\r\n            content = (<Flex>\r\n                <Icon content=\"wait\" animate={true} /><div>{\"Chargement en cours...\"}</div>\r\n            </Flex>);\r\n        } else {\r\n            const { keys, values } = getFieldsKeysAndValues(data, this.props.structure);\r\n            let value = this.state.selectedField;\r\n            if (keys.indexOf(value) === -1) value = keys[0];\r\n            const occurences = data[value];\r\n            content = (<div>\r\n                <Combo\r\n                    keys={keys}\r\n                    onChange={selectedField => {\r\n                        console.info(\"[onChange] selectedField=\", selectedField);\r\n                        this.setState({ selectedField });\r\n                    }}\r\n                    value={value}>{\r\n                        values.map((val, idx) => {\r\n                            const key = keys[idx];\r\n                            return <div key={key}><b>{`${val} `}</b><small className='grey'>{key}</small></div>\r\n                        })\r\n                    }</Combo>\r\n                <br />\r\n                <center>\r\n                    <Pie colors={DEFAULT_COLORS}\r\n                        values={getValuesForPie(occurences)} />\r\n                </center>\r\n                <div>{\r\n                    occurences.occ.map(([caption, count], index) => {\r\n                        const colorIndex = Math.min(DEFAULT_COLORS.length - 1, index);\r\n                        const color = DEFAULT_COLORS[colorIndex];\r\n                        return (\r\n                            <Flex key={index}\r\n                                justifyContent=\"space-between\"\r\n                                alignItems=\"center\"\r\n                                dir=\"row\"\r\n                                classes={index % 2 ? \"thm-bg1\" : \"thm-bg2\"}>\r\n                                <Flex\r\n                                    justifyContent=\"space-between\"\r\n                                    wide={false}\r\n                                    dir=\"row\"\r\n                                    alignItems=\"center\">\r\n                                    <div className=\"bullet\" style={{\r\n                                        background: color\r\n                                    }}></div>\r\n                                    <span>{caption}</span>\r\n                                </Flex>\r\n                                <div><b>{count}</b></div>\r\n                            </Flex>\r\n                        )\r\n                    })\r\n                }</div>\r\n                <Button\r\n                    wide={true}\r\n                    icon=\"export\"\r\n                    label={_(\"export\")}\r\n                    onClick={() => this.export()} />\r\n            </div >);\r\n        }\r\n\r\n        const stat: IStatsConfig = this.props.stat;\r\n        return (\r\n            <div className=\"presentational-stat thm-ele-card thm-bg1\">\r\n                <div className=\"thm-bgPD\">{`${stat.carecenter.name}, du ${formatDate(stat.dateMin)} au ${formatDate(stat.dateMax)}`}</div>\r\n                <div>{content}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction getFieldsKeysAndValues(data: TDataFromService, structure: IStructure): { keys: string[], values: string[] } {\r\n    const keys = Object.keys(data);\r\n    const values = keys.map(key => Structure.getFieldCaption(key, structure));\r\n    const array = keys.map((key, index) => [key, values[index]]);\r\n    array.sort((a, b) => {\r\n        const A = a[1];\r\n        const B = b[1];\r\n        if (A < B) return -1;\r\n        if (A > B) return +1;\r\n        return 0;\r\n    });\r\n\r\n    return {\r\n        keys: array.map(item => item[0]),\r\n        values: array.map(item => item[1])\r\n    };\r\n}\r\n\r\nfunction formatDate(date: number): string {\r\n    const d = new Date(date);\r\n    return `${d.getDate()}-${1 + d.getMonth()}-${d.getFullYear()}`;\r\n}\r\n\r\n\r\nfunction getValuesForPie(occurences: IOccurences, sectors: number = 4): number[] {\r\n    const { sum, occ } = occurences;\r\n    const values: number[] = [];\r\n    let total = 0;\r\n    for (let i = 0; i < Math.min(sectors, occ.length); i++) {\r\n        const [, count] = occ[i];\r\n        values.push(count);\r\n        total += count;\r\n    }\r\n    if (sum > total) values.push(sum - total);\r\n    return values;\r\n}\r\n","import React from \"react\"\nimport castArray from \"../converter/array\"\nimport castString from \"../converter/string\"\nimport castBoolean from \"../converter/boolean\"\nimport Button from \"../view/button\"\nimport Gesture from \"../gesture\"\nimport \"./sidemenu.css\"\n\ninterface ISidemenuProps {\n    show?: boolean;\n    head?: string;\n    menu?: React.ReactElement<HTMLDivElement>;\n    body?: React.ReactElement<HTMLDivElement>;\n    classes?: string[] | string;\n    onShowChange?: (isMenuVisible: boolean) => void;\n}\n\nexport default class Sidemenu extends React.Component<ISidemenuProps, {}> {\n    refMenu = React.createRef<HTMLDivElement>();\n\n    constructor(props: ISidemenuProps) {\n        super(props);\n        this.handleShowChange = this.handleShowChange.bind(this);\n    }\n\n    componentDidMount() {\n        const menu = this.refMenu.current;\n        if (!menu) return;\n        Gesture(menu).on({\n            swipeleft: () => {\n                const handler = this.props.onShowChange;\n                if (typeof handler === 'function') handler(false);\n            }\n        });\n    }\n    handleShowChange() {\n        const handler = this.props.onShowChange;\n        if (typeof handler !== 'function') return;\n        handler(!castBoolean(this.props.show, window.innerWidth > 480));\n    }\n\n    render() {\n        const show = castBoolean(this.props.show, window.innerWidth > 480);\n        const head = castString(this.props.head, \"\");\n        const classes = [\"tfw-layout-sidemenu thm-bg0\"].concat(castArray(this.props.classes));\n        if (show) classes.push(\"show\");\n\n        return (\n            <div className={classes.join(\" \")} >\n                <div className=\"body thm-bg0\" >{this.props.body}</div>\n                <div className=\"menu thm-ele-nav thm-bg1\" ref={this.refMenu}>\n                    <header className=\"thm-ele-nav thm-bgPD\" >{head}</header>\n                    <menu> {this.props.menu} </menu>\n                </div>\n                <div className=\"icon thm-bgPD\" >\n                    <Button icon=\"menu\" flat={true} onClick={this.handleShowChange} />\n                </div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\"\nimport { connect } from 'react-redux'\nimport CarecenterHeader from \"./carecenter-header\"\nimport Stat from \"../presentational/stat\"\nimport Sidemenu from \"../tfw/layout/sidemenu\"\nimport Button from \"../tfw/view/button\"\nimport InputDate from \"../tfw/view/input-date\"\nimport User from \"../state/user\"\nimport { IState, IDispatchFunction, IOrganization, ICarecenter } from \"../types\"\nimport Pie from \"../presentational/pie\"\nimport _ from \"../intl\";\n\nfunction mapStateToProps(state: IState) {\n    const stats = state.stats.map( stat => {\n        const carecenter = stat.carecenter;\n        const structureId = carecenter.id;\n        const structure = state.structures.find(s => s.id === structureId);\n        if( !structure) {\n            console.error(`There is no Structure with id=${structureId} in carecenter \"${carecenter.name}\"!`);\n            return null;\n        }\n        return (<Stat key={JSON.stringify(stat)} stat={stat} structure={structure}/>);\n    });\n    return {\n        head: state.user.nickname,\n        menu: (<div>\n            <ul>{state.organizations.map((organization: IOrganization) => (\n                <li key={organization.id}>{organization.name}<ul>{\n                    state.carecenters.filter((carecenter: ICarecenter) =>\n                        carecenter.organizationId === organization.id)\n                        .map((carecenter: ICarecenter) => (\n                            <CarecenterHeader\n                                key={carecenter.id}\n                                carecenter={carecenter}\n                                structures={state.structures} />\n                        ))\n                }</ul></li>\n            ))\n            }</ul>\n            <br /><hr /><br />\n            <Button label={_(\"logout\")} icon=\"logout\" wide={true}\n                onClick={() => window.location.reload()} />\n        </div>),\n        body: stats.length > 0 ? stats : <div>{\"Toutes vos statistiques s'afficheront ici...\"}</div>\n        // body: stats.length > 0 ? stats : <Pie values={[100, 78 ,24, 5]}/>\n    }\n}\n\nfunction mapDispatchToProps(dispatch: IDispatchFunction) {\n    return {\n        onLanguageClick() {\n            dispatch(User.setLanguage(\"jp\"));\n        },\n\n        onLogoutClick() {\n            window.location.reload();\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidemenu);\n","import * as React from \"react\"\n\nimport { IUser } from \"./types\"\nimport Sidemenu from \"./container/sidemenu\"\n\nimport \"./App.css\"\n\ninterface IAppProps {\n    user: IUser\n}\n\nexport default class App extends React.Component<IAppProps, {}> {\n    render() {\n        return <Sidemenu classes=\"App\" />\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport State from \"./state\"\nimport Intl from \"./tfw/intl\";\nimport { IUser, IOrganization, ICarecenter, IStructure } from \"./types\"\nimport ServiceOrganization from \"./service/organization\"\nimport ServiceCarecenter from \"./service/carecenter\"\nimport ServiceStructure from \"./service/structure\"\n\nimport App from \"./App\";\n\nexport default {\n    async start(user: IUser) {\n        const root = document.getElementById(\"root\");\n        ReactDOM.render(\n            <Provider store={State.store}><App user={user} /></Provider>,\n            root);\n        State.dispatch(State.User.setLanguage(Intl.lang));\n        State.dispatch(State.User.setNickname(user.nickname));\n        const organizations = await ServiceOrganization.list();\n        State.dispatch(State.Organizations.setOrganizations(organizations));\n        State.dispatch(State.Carecenters.setCarecenters([]));\n        organizations.forEach(async (organization: IOrganization) => {\n            const structures = await ServiceStructure.list(organization.id);\n            structures.forEach((structure: IStructure) => {\n                State.dispatch(State.Structures.addStructure(structure));\n            });\n            const carecenters = await ServiceCarecenter.list(organization.id);\n            carecenters.forEach((carecenter: ICarecenter) => {\n                State.dispatch(State.Carecenters.addCarecenter(carecenter));\n            });\n        })\n    }\n}\n"],"sourceRoot":""}