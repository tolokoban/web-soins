{"version":3,"sources":["structure/parser.yaml","App.yaml","report/report.fods","tfw/view/input-date.yaml","presentational/stat.yaml","state/user.ts","state/organizations.ts","state/carecenters.ts","structure/index.ts","state/structures.ts","state/stats-config.ts","state/stats.ts","util/hash.ts","state/index.ts","service/organization.ts","service/carecenter.ts","structure/parser.ts","service/structure.ts","tfw/fileapi.ts","tfw/util.ts","intl.ts","report/report.ts","presentational/carecenter-header.tsx","tfw/debouncer.ts","tfw/view/input-date.tsx","presentational/stats-config.tsx","container/stats-config.ts","dialog/stats-config.tsx","container/carecenter-header.tsx","presentational/pie.tsx","service/stat.ts","presentational/stat.tsx","tfw/layout/sidemenu.tsx","container/sidemenu.tsx","App.tsx","main.tsx"],"names":["module","exports","fr","err-1","err-2","err-3","en","cancel","close","code","consultations","consultations-count","create-stat","create-stat-consultation","create-stat-patient","date-min","date-max","genereting-report","logout","patients","patients-count","report","stat-type","struct","welcome","__webpack_require__","p","invalid","month-0","month-1","month-2","month-3","month-4","month-5","month-6","month-7","month-8","month-9","month-10","month-11","export","no-data","ATTRIBUTES","Set","state_user","INITIAL_STATE","email","nickname","language","roles","reducer","state","action","type","startsWith","attName","substr","length","has","Error","concat","attValue","data","Object","assign","defineProperty","setLanguage","setNickname","state_organizations","organizations","slice","organization","newState","push","add","map","item","id","update","setOrganizations","addOrganization","updateOrganization","state_carecenters","carecenters","carecenter","setCarecenters","addCarecenter","updateCarecenter","src_structure","createPatientsFieldsFromStructure","structure","patientsFields","patientFields","forEach","patientField","createPatientsFieldsCaptionsFromStructure","patientsFieldsCaptions","Intl","toText","caption","getFieldCaption","key","charAt","formFields","state_structures","structures","setStructures","addStructure","updateStructure","stats_config","statsType","dateMin","today","Date","getDate","firstDayOfCurrentMonth","getFullYear","getMonth","getTime","lastMonth","dateMax","now","birthday","size","nationality","organizationId","structureId","patientsCount","consultationsCount","name","objectSpread","setType","date","setDateMin","setDateMax","fields","setPatientsFields","fieldName","castString","fieldVisibility","castBoolean","setPatientField","state_stats","stats","stat","addStat","hash","statsConfig","obj","user","User","Organizations","Carecenters","Structures","StatsConfig","Stats","store","createStore","arguments","undefined","console","log","carecenterId","find","c","s","Structure","initStatsConfig","h","Hash","filter","removeStat","src_state","dispatch","service_organization","list","_list","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","WebService","exec","abrupt","sent","stop","apply","this","service_carecenter","_x","_","make","require","RX_LINE","parser","parse","types","levels","split","line","lineNumber","trim","level","computeLevel","pop","children","m","toUpperCase","tags","v","parseLine","ex","message","flattenFormsFields","forms","recursiveFlattenFormsFields","path","keys","child","sort","b","captionA","captionB","service_structure","parsePatient","patient","parseFormFields","exams","vaccins","sources","def","Parser","error","stringifiedPatientDef","raw","toIntl","result","fringe","shift","_arr","_i","value","fileapi","saveAs","blob","fileName","url","window","URL","createObjectURL","anchorElem","document","createElement","style","display","href","download","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","util","padNumber","fillWith","text","clamp","min","max","loadTextFromURL","Promise","resolve","reject","fetch","then","response","ok","status","statusText","catch","loadJsonFromURL","json","report_report","generate","Dialog","wait","doGenerate","_callee2","content","_context2","Util","LibreOfficeCalcTemplate","FileAPI","Blob","CarecenterHeader","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleStatClick","handler","onStatClick","handleStructClick","onStructClick","handleReportClick","Report","bind","assertThisInitialized","react","className","view_button","icon","small","onClick","React","debouncer","delay","timer","_len","args","Array","_key","clearTimeout","Input","inputDay","inputMonth","inputYear","handleChange","Debouncer","day","parseInt","current","isNaN","month","year","setState","onChange","label","castInteger","wide","globalId","classes","header","htmlFor","join","ref","maxLength","defaultValue","monthId","handleTypeChange","handleDateMinChange","handleDateMaxChange","index","onTypeChange","onDateMinChange","onDateMaxChange","react_default","combo","flex","input_date_Input","Component","connect","Actions","info","dialog_stats_config","show","dialog","closeOnEscape","title","es","State","container_stats_config","footer","flat","hide","warning","StatsConfigDialog","DEFAULT_COLORS","Pie","canvas","paint","values","colors","castArray","width","radius","Math","floor","turn","PI","angleStep","total","reduce","acc","val","ctx","getContext","angle","angleTarget","lineTo","ang","sin","cos","save","clearRect","translate","fillStyle","globalAlpha","ellipse","fill","strokeStyle","lineWidth","i","color","beginPath","moveTo","closePath","stroke","restore","height","service_stat","extract","_extract","extraction","begin","convertTime","end","consultation","convertIntoOccurences","milliseconds","input","occurences","sum","occ","fieldValues","sortDescBySecondElement","A","Stat","selectedField","handleClose","onClose","dataFromService","refresh","StatService","_getFieldsKeysAndValu","getFieldsKeysAndValues","output","fieldKey","idx","fieldCaption","_ref","_ref2","slicedToArray","count","_this2","_getFieldsKeysAndValu2","indexOf","pie_Pie","getValuesForPie","_ref3","_ref4","colorIndex","justifyContent","alignItems","dir","background","animate","formatDate","array","B","d","sectors","Sidemenu","refMenu","createRef","handleShowChange","menu","Gesture","on","swipeleft","onShowChange","innerWidth","head","stat_Stat","container_carecenter_header","location","reload","onLanguageClick","onLogoutClick","App","src_container_sidemenu","__webpack_exports__","start","_start","root","getElementById","ReactDOM","render","App_App","lang","ServiceOrganization","ServiceStructure","ServiceCarecenter","_x2"],"mappings":"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","file":"static/js/3.ee521a0c.chunk.js","sourcesContent":["module.exports = {\"fr\":{\"err-1\":\"Une ligne non vide et non commentée doit toujours commencer par au moins une astérisque pour indiquer le niveau hiérarchique.\",\"err-2\":\"<html>Vous avez sauté au moins un niveau hiérarchique:<br/><code>$1</code> !<br/><br/>Vous étiez au niveau <b>$2</b> et vous définissez maintenant le niveau <b>$3</b>.\",\"err-3\":\"<html>Vous avez déjà déclaré cet identifiant : <b>$1</b> !\"}}","module.exports = {\"en\":{\"cancel\":\"Cancel\",\"close\":\"Close\",\"code\":\"Code:\",\"consultations\":\"Consultations\",\"consultations-count\":\"Consultations:\",\"create-stat\":\"Create Statistics\",\"create-stat-consultation\":\"Consult. Statistics\",\"create-stat-patient\":\"Patients Statistics\",\"date-min\":\"Start Date\",\"date-max\":\"End Date\",\"genereting-report\":\"Generating report...\",\"logout\":\"Logout\",\"patients\":\"Patients\",\"patients-count\":\"Patients:\",\"report\":\"To add an annual report, clic on the left pane's button bearing the following icon:\",\"stat-type\":\"Statistic Type\",\"struct\":\"Structure:\",\"welcome\":\"To add new statistics, clic on the left pane's button bearing the following icon:\"},\"fr\":{\"cancel\":\"Annuler\",\"close\":\"Fermer\",\"code\":\"Code :\",\"consultations\":\"Consultations\",\"consultations-count\":\"Consultations :\",\"create-stat\":\"Créer des statistiques\",\"create-stat-consultation\":\"Stats consultations\",\"create-stat-patient\":\"Stats patients\",\"date-min\":\"Date de début\",\"date-max\":\"Date de fin\",\"genereting-report\":\"Rapport en cours de réalisation...\",\"logout\":\"Déconnexion\",\"patients\":\"Patients\",\"patients-count\":\"Patients :\",\"report\":\"Pour éditer un rapport annuel, cliquez sur le bouton avec l'icône suivante dans le panneau de gauche :\",\"stat-type\":\"Type de statistique\",\"struct\":\"Structure :\",\"welcome\":\"Pour ajouter des statistiques, cliquez sur le bouton avec l'icône suivante dans le panneau de gauche : \"}}","module.exports = __webpack_public_path__ + \"static/media/report.60e5f273.fods\";","module.exports = {\"en\":{\"invalid\":\"Invalid date!\",\"month-0\":\"Jan\",\"month-1\":\"Feb\",\"month-2\":\"Mar\",\"month-3\":\"Apr\",\"month-4\":\"May\",\"month-5\":\"Jun\",\"month-6\":\"Jul\",\"month-7\":\"Aug\",\"month-8\":\"Sep\",\"month-9\":\"Oct\",\"month-10\":\"Nov\",\"month-11\":\"Dec\"},\"fr\":{\"invalid\":\"Date invalide !\",\"month-0\":\"Jan\",\"month-1\":\"Fév\",\"month-2\":\"Mar\",\"month-3\":\"Avr\",\"month-4\":\"Mai\",\"month-5\":\"Jun\",\"month-6\":\"Jul\",\"month-7\":\"Aou\",\"month-8\":\"Sep\",\"month-9\":\"Oct\",\"month-10\":\"Nov\",\"month-11\":\"Déc\"}}","module.exports = {\"en\":{\"close\":\"Close\",\"export\":\"Export to Spreadsheet\",\"no-data\":\"There is no data for this period!\"},\"fr\":{\"close\":\"Fermer\",\"export\":\"Exporter vers un tableur\",\"no-data\":\"Il n'y a aucune donnée sur cette période !\"}}","import { IAction, IUser } from \"../types\"\n\nconst PREFIX = \"user:\";\nconst ATTRIBUTES = new Set(['nickname', 'language']);\n\nexport default {\n    INITIAL_STATE: { email: \"\", nickname: \"\", language: \"\", roles: [] },\n\n    reducer(state: IUser, action: IAction): IUser {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        const attName = action.type.substr(PREFIX.length);\n        if (!ATTRIBUTES.has(attName)) {\n            throw Error(`Unknown attribute \"${attName}\"!`);\n        }\n        const attValue = action.data;\n        return Object.assign(state, { [attName]: attValue });\n    },\n\n    setLanguage(language: string): IAction {\n        return { type: \"user:language\", data: language };\n    },\n\n    setNickname(nickname: string): IAction {\n        return { type: \"user:nickname\", data: nickname };\n    }\n}\n","import { IAction, IOrganization } from \"../types\"\n\nconst PREFIX = \"organization:\";\n\nexport default {\n    INITIAL_STATE: [],\n\n    reducer(state: IOrganization[], action: IAction): IOrganization[] {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        const command = action.type.substr(PREFIX.length);\n        switch (command) {\n            case \"set\": return set(state, action.organizations);\n            case \"add\": return add(state, action.organization);\n            case \"update\": return update(state, action.organization);\n            default: throw Error(`Unknown action \"${type}\"!`);\n        }\n    },\n\n    setOrganizations(organizations: IOrganization[]): IAction {\n        return { type: \"organization:set\", organizations };\n    },\n\n    addOrganization(organization: IOrganization): IAction {\n        return { type: \"organization:add\", organization };\n    },\n\n    updateOrganization(organization: IOrganization): IAction {\n        return { type: \"organization:update\", organization };\n    }\n}\n\nfunction set(state: IOrganization[], organizations: IOrganization[]): IOrganization[] {\n    return organizations.slice();\n}\n\nfunction add(state: IOrganization[], organization: IOrganization): IOrganization[] {\n    const newState = state.slice();\n    newState.push(organization);\n    return newState;\n}\n\n\nfunction update(state: IOrganization[], organization: IOrganization): IOrganization[] {\n    return state.map(item => item.id === organization.id ? organization : item);\n}\n","import { IAction, ICarecenter } from \"../types\"\n\nconst PREFIX = \"carecenter:\";\n\nexport default {\n    INITIAL_STATE: [],\n\n    reducer(state: ICarecenter[], action: IAction): ICarecenter[] {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        const command = action.type.substr(PREFIX.length);\n        switch (command) {\n            case \"set\": return set(state, action.carecenters);\n            case \"add\": return add(state, action.carecenter);\n            case \"update\": return update(state, action.carecenter);\n            default: throw Error(`Unknown action \"${type}\"!`);\n        }\n    },\n\n    setCarecenters(carecenters: ICarecenter[]): IAction {\n        return { type: \"carecenter:set\", carecenters };\n    },\n\n    addCarecenter(carecenter: ICarecenter): IAction {\n        return { type: \"carecenter:add\", carecenter };\n    },\n\n    updateCarecenter(carecenter: ICarecenter): IAction {\n        return { type: \"carecenter:update\", carecenter };\n    }\n}\n\nfunction set(state: ICarecenter[], carecenters: ICarecenter[]): ICarecenter[] {\n    return carecenters.slice();\n}\n\nfunction add(state: ICarecenter[], carecenter: ICarecenter): ICarecenter[] {\n    const newState = state.slice();\n    newState.push(carecenter);\n    return newState;\n}\n\nfunction update(state: ICarecenter[], carecenter: ICarecenter): ICarecenter[] {\n    return state.map(\n        item => item.id === carecenter.id ? Object.assign(item, carecenter) : item);\n}\n","import { IStructure, IPatientField } from \"../types\"\r\nimport Intl from \"../tfw/intl\"\r\n\r\nexport default {\r\n    createPatientsFieldsFromStructure(structure: IStructure): { [key: string]: boolean } {\r\n        const patientsFields : { [key: string]: boolean }= {};\r\n        structure.patientFields.forEach((patientField: IPatientField) => {\r\n            patientsFields[patientField.id] = true;\r\n        });\r\n        return patientsFields;\r\n    },\r\n\r\n    createPatientsFieldsCaptionsFromStructure(structure: IStructure): { [key: string]: string } {\r\n        const patientsFieldsCaptions : { [key: string]: string }= {};\r\n        structure.patientFields.forEach((patientField: IPatientField) => {\r\n            patientsFieldsCaptions[patientField.id] = Intl.toText(patientField.caption);\r\n        });\r\n        return patientsFieldsCaptions;\r\n    },\r\n\r\n    getFieldCaption(key:string, structure:IStructure) {\r\n        if( key.charAt(0) !== '#') return key;\r\n        const item: {caption: string, type: string}|undefined =\r\n         structure.formFields[key];\r\n        if( !item ) return key;\r\n        return Intl.toText(item.caption);\r\n    }\r\n}\r\n","import { IAction, IStructure } from \"../types\"\n\nconst PREFIX = \"structure:\";\n\nexport default {\n    INITIAL_STATE: [],\n\n    reducer(state: IStructure[], action: IAction): IStructure[] {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        const command = action.type.substr(PREFIX.length);\n        switch (command) {\n            case \"set\": return set(state, action.structures);\n            case \"add\": return add(state, action.structure);\n            case \"update\": return update(state, action.structure);\n            default: throw Error(`Unknown action \"${type}\"!`);\n        }\n    },\n\n    setStructures(structures: IStructure[]): IAction {\n        return { type: \"structure:set\", structures };\n    },\n\n    addStructure(structure: IStructure): IAction {\n        return { type: \"structure:add\", structure };\n    },\n\n    updateStructure(structure: IStructure): IAction {\n        return { type: \"structure:update\", structure };\n    }\n}\n\nfunction set(state: IStructure[], structures: IStructure[]): IStructure[] {\n    return structures.slice();\n}\n\nfunction add(state: IStructure[], structure: IStructure): IStructure[] {\n    const newState = state.slice();\n    newState.push(structure);\n    return newState;\n}\n\nfunction update(state: IStructure[], structure: IStructure): IStructure[] {\n    return state.map(\n        item => item.id === structure.id ? Object.assign(item, structure) : item);\n}\n","import { IAction, IStatsConfig } from \"../types\"\nimport castString from \"../tfw/converter/string\"\nimport castBoolean from \"../tfw/converter/boolean\"\n\nconst PREFIX = \"stats-config:\";\n\nexport default {\n    INITIAL_STATE: {\n        statsType: \"consultations\",\n        dateMin: lastMonth(),\n        dateMax: today(),\n        patientsFields: {\n            birthday: true,\n            size: false,\n            nationality: true\n        },\n        patientsFieldsCaptions: {\n            birthday: \"Date de naissance\",\n            size: \"Taille\",\n            nationality: \"Nationalité\"\n        },\n        carecenter: {\n            id: 0,\n            organizationId: 0,\n            structureId: 0,\n            patientsCount: 0,\n            consultationsCount: 0,\n            name: \"\",\n            code: \"\"\n        }\n    },\n\n    reducer(state: IStatsConfig, action: IAction): IStatsConfig {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        switch (action.type.substr(PREFIX.length)) {\n            case \"setType\": return setType(state, action);\n            case \"setDateMin\": return setDateMin(state, action);\n            case \"setDateMax\": return setDateMax(state, action);\r\n            case \"setPatientsFields\": return setPatientsFields(state, action);\r\n            case \"setPatientField\": return setPatientField(state, action);\r\n            default: throw Error(`Unknown action \"${type}\"!`);\r\n        }\n    },\n\n    setType(statsType: \"patients\" | \"consultations\"): IAction {\n        return { type: \"stats-config:setType\", statsType };\n    },\n\n    setDateMin(date: number): IAction {\n        return { type: \"stats-config:setDateMin\", date };\n    },\n\n    setDateMax(date: number): IAction {\n        return { type: \"stats-config:setDateMax\", date };\n    },\n\n    setPatientsFields(fields: { [key: string]: boolean }): IAction {\n        return { type: \"stats-config:setPatientsFields\", fields };\n    },\n\n    setPatientField(fieldName: string, fieldVisibility: boolean): IAction {\n        return { type: \"stats-config:setPatientField\", fieldName, fieldVisibility };\n    }\n}\n\nfunction setType(state: IStatsConfig, action: IAction): IStatsConfig {\n    return {\n        ...state,\n        statsType: action.statsType || \"consultations\"\n    };\n}\n\nfunction setDateMin(state: IStatsConfig, action: IAction): IStatsConfig {\n    return {\n        ...state,\n        dateMin: action.date\n    };\n}\n\nfunction setDateMax(state: IStatsConfig, action: IAction): IStatsConfig {\n    return {\n        ...state,\n        dateMax: action.date\n    };\n}\n\nfunction setPatientsFields(state: IStatsConfig, action: IAction): IStatsConfig {\n    return {\n        ...state,\n        patientsFields: action.fields || {}\n    };\n}\n\nfunction setPatientField(state: IStatsConfig, action: IAction): IStatsConfig {\n    if (typeof action.fieldName !== 'string') {\n        throw Error(`action must have an attribute \"fieldName\" of type \"string\" but we found \"${typeof action.fieldName}\"`);\n    }\n    const fieldName: string = castString(action.fieldName, \"\");\n    const fieldVisibility: boolean = castBoolean(action.fieldVisibility, false);\n    return {\n        ...state,\n        patientsFields: {\n            ...state.patientsFields,\n            [fieldName]: fieldVisibility\n        }\n    };\n}\n\n\nfunction today() {\n    return Date.now();\n}\n\nfunction lastMonth() {\n    const today = new Date();\n    if (today.getDate() !== 1) {\n        const firstDayOfCurrentMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n        return firstDayOfCurrentMonth.getTime();\n    } else {\n        const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\n        return lastMonth.getTime();\n    }\n}\n","import { IAction, IStatsConfig } from \"../types\"\nimport castString from \"../tfw/converter/string\"\nimport castBoolean from \"../tfw/converter/boolean\"\n\nconst PREFIX = \"stats:\";\n\nexport default {\n    INITIAL_STATE: [],\n\n    reducer(state: IStatsConfig[], action: IAction): IStatsConfig[] {\n        const { type } = action;\n        if (!type.startsWith(PREFIX)) return state;\n\n        switch (action.type.substr(PREFIX.length)) {\n            case \"addStat\": return addStat(state, action);\n            default: throw Error(`Unknown action \"${type}\"!`);\r\n        }\n    },\n\n    addStat(stat: IStatsConfig): IAction {\n        return { type: \"stats:addStat\", stat };\n    }\n}\n\nfunction addStat(state: IStatsConfig[], action: IAction): IStatsConfig[] {\n    const stats = state.stats.slice();\n    stats.push( action.stat );\n    return stats;\n}\n","import { IStatsConfig } from \"../types\"\r\n\r\nexport default {\r\n    statsConfig(obj: IStatsConfig): string {\r\n        return `${obj.statsType}/${obj.dateMin}-${obj.dateMax}`;\r\n    }\r\n}\r\n","/**\n * The full state of the application is stored and managed here.\n */\nimport { createStore } from 'redux'\nimport User from \"./user\";\nimport Organizations from \"./organizations\"\nimport Carecenters from \"./carecenters\"\nimport Structure from \"../structure\"\nimport Structures from \"./structures\"\nimport StatsConfig from \"./stats-config\"\nimport Stats from \"./stats\"\nimport Hash from \"../util/hash\"\nimport { IState, IAction, IStatsConfig } from \"../types\"\n\nfunction dispatch(action: IAction) {\n    store.dispatch(action);\n}\n\nconst INITIAL_STATE: IState = {\n    user: User.INITIAL_STATE,\n    organizations: Organizations.INITIAL_STATE,\n    carecenters: Carecenters.INITIAL_STATE,\n    structures: Structures.INITIAL_STATE,\n    statsConfig: StatsConfig.INITIAL_STATE,\n    stats: Stats.INITIAL_STATE\n};\n\nfunction reducer(state: IState | undefined = INITIAL_STATE, action: IAction): IState {\n    console.log(\"state =\", state);\n    switch (action.type) {\n        case \"initStatsConfig\": return initStatsConfig(state, action);\n        case \"addStat\": return addStat(state, action);\n        case \"removeStat\": return removeStat(state, action);\n        default: return {\n            user: User.reducer(state.user, action),\n            stats: Stats.reducer(state.stats, action),\n            organizations: Organizations.reducer(state.organizations, action),\n            carecenters: Carecenters.reducer(state.carecenters, action),\n            structures: Structures.reducer(state.structures, action),\n            statsConfig: StatsConfig.reducer(state.statsConfig, action)\n        };\n    }\n}\n\nconst store = createStore(reducer);\n\nfunction addStat(state: IState, action: IAction): IState {\n    const h = Hash.statsConfig(state.statsConfig);\n    const stats = state.stats.filter(s => Hash.statsConfig(s) !== h);\n    stats.push({ ...state.statsConfig });\n    return { ...state, stats };\n}\n\nfunction removeStat(state: IState, action: IAction): IState {\n    const stats = state.stats.filter(s => Hash.statsConfig(s) !== action.key);\n    return { ...state, stats };\n}\n\nfunction initStatsConfig(state: IState, action: IAction): IState {\n    const carecenterId = action.carecenterId;\n    const carecenter = state.carecenters.find(c => c.id === carecenterId);\n    if (!carecenter) {\n        throw Error(`There is no Carecenter with id=${carecenterId}!`);\n    }\n    const structureId = carecenter.structureId;\n    if (typeof structureId !== 'number') {\n        throw Error('Missing attribute number \"structureId\"!');\n    }\n    const structure = state.structures.find(s => s.id === structureId);\n    if (!structure) {\n        throw Error(`There is no structure with id ${structureId}!`);\n    }\n    return {\n        ...state,\n        statsConfig: {\n            ...state.statsConfig,\n            carecenter,\n            patientsFields: Structure.createPatientsFieldsFromStructure(structure),\n            patientsFieldsCaptions: Structure.createPatientsFieldsCaptionsFromStructure(structure)\n        }\n    }\n}\n\nexport default {\n    store, dispatch,\n\n    User, Organizations, Carecenters, Structures, StatsConfig,\n\n    initStatsConfig(carecenterId: number): IAction {\n        return { type: \"initStatsConfig\", carecenterId };\n    },\n    addStat(): IAction {\n        return { type: \"addStat\" };\n    },\n    removeStat(key: string): IAction {\n        return { type: \"removeStat\", key };\n    }\n}\n","import WebService from \"../tfw/web-service\"\n\nexport default {\n    async list() {\n        return await WebService.exec(\"orga.list\");\n    }\n}\n","import WebService from \"../tfw/web-service\"\nimport { ICarecenter } from \"../types\"\n\ninterface IServiceCarecenter {\n    id: number;\n    name: string;\n    code: string;\n    patientsCount: number;\n    consultationsCount: number;\n    structure: number;\n}\n\nexport default {\n    async list( organizationId: number) : Promise<ICarecenter[]> {\n        const carecenters = await WebService.exec(\"carecenter.list\", organizationId);\n        return carecenters.map( (carecenter: IServiceCarecenter) => ({\n            id: carecenter.id,\n            name: carecenter.name,\n            code: carecenter.code,\n            patientsCount: carecenter.patientsCount,\n            consultationsCount: carecenter.consultationsCount,\n            structureId: carecenter.structure,\n            organizationId\n        }));\n    }\n}\n","import Intl from \"../tfw/intl\";\r\nconst _ = Intl.make(require(\"./parser.yaml\"));\r\n\r\n\r\n/**\r\n * Le fichier `types.org` définit tous  les types de données complexe.\r\n * Il  n'y a  pas  de type  très contraignant,  tous  les textes  sont\r\n * libres, mais on propose des listes pour faciliter la saisie. Chaque\r\n * élément  de cette  liste est  muni d'un  identifiant (précédé  d'un\r\n * dièse `#`).\r\n * Un type peut être hiérarchique. Par exemple, une adresse propose un\r\n * pays, une région,  un district, ... Les  propositions dépendent des\r\n * choix  précédents. Ainsi,  la liste  des propositions  de districts\r\n * dépend de la région sélectionnée.\r\n *\r\n * Le  parsing du  fichier `types.org`  se  fait ligne  par ligne.  On\r\n * ignore tous  les espaces/tabulations en  début de ligne.  Le nombre\r\n * d'astérisques  `*`  qui  commencent  une ligne  indique  le  niveau\r\n * hiérarchique.\r\n * Au  niveau 1,  on trouve  l'identifiant du  type qui  doit toujours\r\n * commencer par un dièse `#`.\r\n *\r\n * Voici un  exemple de  fichier en  entrée et de  comment on  doit le\r\n * traduire.\r\n * ```\r\n * #GENDER\r\n * * #H Homme\r\n * * #F Femme\r\n *\r\n * #LOCALIZATION\r\n * * Cameroun\r\n * ** Littoral\r\n * *** District 9\r\n * **** Village 1\r\n * **** Village 2\r\n * **** Village 3\r\n * *** Un peu plus loin\r\n * **** Village A\r\n * **** Village B\r\n * ** Centre\r\n * *** Pas tout près\r\n * **** Village Toto\r\n * *** Au fin fond du...\r\n * **** Village Alpha\r\n * **** Village Beta\r\n * **** Village Gama\r\n * ```\r\n *\r\n * ```\r\n * {\r\n *   \"#GENDER\": {\r\n *     \"#H\": { \"caption\": \"Homme\" },\r\n *     \"#F\": { \"caption\": \"Femme\" }\r\n *   },\r\n *   \"#LOCALIZATION\": {\r\n *     \"Cameroun\": { \"caption\": \"Cameroun\", \"children\": {\r\n *       \"Littoral\": { \"caption\": \"Littoral\", \"children\": {\r\n *         ...\r\n *       }},\r\n *       \"Centre\": { \"caption\": \"Centre\", \"children\": {\r\n *         ...\r\n *       }},\r\n *       ...\r\n *     }}\r\n *   }\r\n * }\r\n * ```\r\n */\r\n\r\n\r\nconst RX_LINE = /^(#[A-Z0-9-]+)?([^\\(@]*)(\\([^\\)]*\\)\\+?)?(@[A-Z0-9,-]+)?/;\r\n\r\n\r\nfunction parse(code: string) {\r\n    const types = {};\r\n    const levels = [types];\r\n    if (typeof code !== 'string') code = `${code}`;\r\n    code.split('\\n').forEach(function(line, lineNumber) {\r\n        try {\r\n            line = line.trim();\r\n            // Ignorer les lignes vides.\r\n            if (line.length === 0) return;\r\n            // Ignorer les commentaires.\r\n            if (line.substr(0, 2) === '//') return;\r\n            if (line.charAt(0) !== '*') throw _('err-1');\r\n\r\n            // Calculer le niveau hiérarchique `level`.\r\n            const level = computeLevel(line);\r\n            line = line.substr(level).trim();\r\n\r\n            if (level > levels.length) {\r\n                throw _('err-2', line, levels.length - 1, level);\r\n            }\r\n            while (levels.length > level) {\r\n                levels.pop();\r\n            }\r\n            const item = parseLine(line);\r\n            if (typeof levels[levels.length - 1][item.id] !== 'undefined') {\r\n                throw _('err-3', item.id);\r\n            }\r\n            levels[levels.length - 1][item.id] = item;\r\n            levels.push(item.children || {});\r\n        }\r\n        catch (ex) {\r\n            throw { lineNumber: lineNumber + 1, message: ex };\r\n        }\r\n    });\r\n    return types;\r\n};\r\n\r\n\r\n/**\r\n * @param   {string} line - Line to parse.\r\n * @returns {number} Number of leading '*' in the line.\r\n */\r\nfunction computeLevel(line: string): number {\r\n    let level = 0;\r\n    while (line.charAt(0) == '*') {\r\n        line = line.substr(1);\r\n        level++;\r\n    }\r\n    return level;\r\n}\r\n\r\n\r\nfunction parseLine(line: string) {\r\n    const item = { children: {} };\r\n    const m = RX_LINE.exec(line.trim());\r\n    if (m[2]) {\r\n        item.caption = m[2].trim();\r\n    }\r\n    if (m[1]) {\r\n        item.id = m[1].trim();\r\n    } else {\r\n        item.id = item.caption.toUpperCase();\r\n    }\r\n    if (m[3]) {\r\n        item.type = m[3].substr(1, m[3].length - 2).trim();\r\n    }\r\n    if (m[4]) {\r\n        item.tags = m[4].trim().substr(1).split(',').map(function(v) { return v.trim(); });\r\n    }\r\n    return item;\r\n}\r\n\r\n\r\n/**\r\n * @param {object} forms\r\n * {\r\n *   CONCLUSION: {\r\n *     caption: \"Conclusion\",\r\n *     children: {\r\n *       \"#SURGERY-GYN\": {\r\n *         caption: \"Chirurgie\",\r\n *         id: \"#SURGERY-GYN\",\r\n *         type: \"#SURGERY-GYN\"\r\n *       }\r\n *     }\r\n *   },\r\n *   ...\r\n * }\r\n * @return `[{ id:\"#SURGERY-GYN\", caption:\"Chirurgie\", path:[\"Conclusion\", \"Chirurgie\"] }, ...]`\r\n */\r\nfunction flattenFormsFields(forms) {\r\n    var list = [];\r\n    recursiveFlattenFormsFields(forms, list, []);\r\n    list.sort(function(a, b) {\r\n        var captionA = a.caption;\r\n        var captionB = b.caption;\r\n        if (captionA < captionB) return -1;\r\n        if (captionA > captionB) return +1;\r\n        return 0;\r\n    });\r\n    return list;\r\n}\r\n\r\n\r\nfunction recursiveFlattenFormsFields(children, list, path) {\r\n    Object.keys(children).forEach(function(key) {\r\n        var child = children[key];\r\n        if (typeof child.id === 'string' && child.id.charAt(0) === '#') {\r\n            // Leave.\r\n            list.push({\r\n                id: child.id,\r\n                caption: child.caption,\r\n                path: path.slice()\r\n            });\r\n        }\r\n        else if (child.children) {\r\n            // Node.\r\n            path.push(child.caption);\r\n            recursiveFlattenFormsFields(child.children, list, path);\r\n            path.pop();\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport default { parse, flattenFormsFields }\r\n","import WebService from \"../tfw/web-service\"\nimport Parser from \"../structure/parser\"\nimport Intl from \"../tfw/intl\"\nimport castString from \"../tfw/converter/string\"\nimport { IStructure, IPatientField } from \"../types\"\n\nexport interface IStructureService {\n    id: number;\n    name: string;\n    exams: string;\n    vaccins: string;\n    patient: string;\n    forms: string;\n    types: string;\n}\n\n\nexport default {\n    async list(organizationId: number) {\n        const structures: IStructureService[] =\n            await WebService.exec(\"structure.list\", organizationId);\n        return structures.map((structure: IStructureService) => (\r\n            {\n                id: structure.id,\n                organizationId,\n                name: structure.name,\n                patientFields: parsePatient(structure.patient),\n                formFields: parseFormFields(structure),\n                exams: parse(structure.exams),\n                vaccins: parse(structure.vaccins),\n                forms: parse(structure.forms),\n                types: parse(structure.types),\n                sources: {\n                    exams: structure.exams,\n                    vaccins: structure.vaccins,\n                    patient: structure.patient,\n                    forms: structure.forms,\n                    types: structure.types\n                }\n            }\r\n        ));\n    }\n}\n\n\nfunction parse(def: string) {\n    try {\n        return Parser.parse(def);\n    }\n    catch (ex) {\n        console.error(\"[parsePatient] \", ex);\n        console.log(def);\n    }\n    return null;\n}\n\nfunction parsePatient(stringifiedPatientDef: string): IPatientField[] {\n    try {\n        const raw = Parser.parse(stringifiedPatientDef);\n        const patients: IPatientField[] = Object.keys(raw).map((id: string) => {\n            const patient = raw[id];\n            return {\n                id,\n                type: patient.type,\n                caption: Intl.toIntl(patient.caption)\n            }\n        });\n        return patients;\n    }\n    catch (ex) {\n        console.error(\"[parsePatient] \", ex);\n    }\n    return [];\n}\n\ninterface IFlatField {\n    type: string;\n    caption: { [key: string]: string };\n}\n\nfunction parseFormFields(structure: IStructureService): { [key: string]: IFlatField } {\n    const result: { [key: string]: IFlatField } = {};\n    const fringe = [parse(structure.forms)];\n    while (fringe.length > 0) {\n        const item = fringe.shift();\n        for (const name of Object.keys(item)) {\n            const value = item[name];\n            result[name] = { caption: Intl.toIntl(value.caption) };\n            if (value.type) result[name].type = value.type;\n            if (value.children) {\n                fringe.push(value.children);\n            }\n        }\n    }\n    return result;\n}\n","export default {\n    saveAs(blob: Blob, fileName: string) {\n        const url = window.URL.createObjectURL(blob);\n        const anchorElem = document.createElement(\"a\");\n\n        anchorElem.style.display = \"none\";\n        anchorElem.href = url;\n        anchorElem.download = fileName;\n\n        document.body.appendChild(anchorElem);\n        anchorElem.click();\n\n        document.body.removeChild(anchorElem);\n\n        // On Edge, revokeObjectURL should be called only after\n        // a.click() has completed, atleast on EdgeHTML 15.15048\n        setTimeout(function() {\n            window.URL.revokeObjectURL(url);\n        }, 5000);\n    }\n}\n","export default {\n    padNumber(value: number, size: number = 6, fillWith: string = '0'): string {\n        let text = `${value}`;\n        while (text.length < size) {\n            text = fillWith.charAt(0) + text;\n        }\n        return text;\n    },\n\n    clamp(value: number, min: number = 0, max: number = 1) {\n        if (value < min) return min;\n        if (value > max) return max;\n        return value;\n    },\n\n    loadTextFromURL(url: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            fetch(url)\n                .then((response: Response) => {\n                    if (!response.ok) {\n                        reject(`Error ${response.status}: ${response.statusText}!`);\n                    }\n                    return response.text();\n                })\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    loadJsonFromURL(url: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            fetch(url)\n                .then((response: Response) => {\n                    return response.json();\n                })\n                .then(resolve)\n                .catch(reject);\n        });\n    }\n}\n","import Intl from \"./tfw/intl\";\nexport default Intl.make(require(\"./App.yaml\"));\n","import FileAPI from '../tfw/fileapi'\nimport Dialog from '../tfw/factory/dialog'\nimport Util from '../tfw/util'\nimport _ from \"../intl\";\n\nimport LibreOfficeCalcTemplate from './report.fods'\n\n\nexport default { generate }\n\n\nasync function generate() {\n    Dialog.wait(_(\"generating-report\"), doGenerate())\n}\n\n\nasync function doGenerate() {\n    const content = await Util.loadTextFromURL(LibreOfficeCalcTemplate)\n\n    await FileAPI.saveAs(new Blob([content]), \"report.ods\")\n}\n","import * as React from \"react\"\nimport { ICarecenter, IStructure } from \"../types\"\nimport Button from \"../tfw/view/button\"\nimport Report from '../report'\nimport _ from \"../intl\";\n\nimport \"./carecenter-header.css\"\n\n\ninterface ICarecenterHeaderProps {\n    carecenter: ICarecenter;\n    structures: IStructure[];\n    onStatClick: (carecenter: ICarecenter) => void;\n    onStructClick: (carecenter: ICarecenter) => void;\n}\n\nexport default class CarecenterHeader extends React.Component<ICarecenterHeaderProps, {}> {\n    constructor(props: ICarecenterHeaderProps) {\n        super(props);\n        this.handleStatClick = this.handleStatClick.bind(this);\n    }\n\n    handleStatClick = () => {\n        const handler = this.props.onStatClick;\n        if (typeof handler !== 'function') return;\n        handler(this.props.carecenter);\n    }\n\n    handleStructClick = () => {\n        const handler = this.props.onStructClick;\n        if (typeof handler !== 'function') return;\n        handler(this.props.carecenter);\n    }\n\n    handleReportClick = () => {\n        Report.generate()\n    }\n\n    render() {\n        const carecenter: ICarecenter = this.props.carecenter;\n        const structure: IStructure | undefined = this.props.structures.find(s => s.id === carecenter.structureId);\n\n        return (<div className=\"presentational-carecenter-header\">\n            <div>\n                <div className=\"name\">{carecenter.name}</div>\n                <div className=\"prop\">\n                    <div>{_(\"code\")}</div>\n                    <div>{carecenter.id}-{carecenter.code}</div>\n                </div>\n                <div className=\"prop\">\n                    <div>{_(\"patients-count\")}</div>\n                    <div>{carecenter.patientsCount}</div>\n                </div>\n                <div className=\"prop\">\n                    <div>{_(\"consultations-count\")}</div>\n                    <div>{carecenter.consultationsCount}</div>\n                </div>\n                <div className=\"prop\">\n                    <div>{_(\"struct\")}</div>\n                    <div>{structure ? structure.name : '...'}</div>\n                </div>\n            </div>\n            <div className=\"buttons\">\n                <Button icon=\"stat\" small={true} onClick={this.handleStatClick} /><br />\n                <Button icon=\"report\" small={true} onClick={this.handleReportClick} /><br />\n                {/*<Button icon=\"sitemap\" small={true}\n                    enabled={structure ? true : false}\n                    onClick={this.handleStructClick} />*/}\n            </div>\n        </div>);\n    }\n}\n","type Action = (...args: any[]) => void;\r\n\r\n/**\r\n * The function to call as much as you want. It will perform the debouce for you.\r\n * Put in the same args as the `action` function.\r\n *\r\n * * action -  Action to call. Two consecutive actions cannot be  called if there is\r\n * less than `delay` ms between them.\r\n * * delay - Number of milliseconds.\r\n */\r\nexport default function (action: Action, delay: number): Action {\r\n    let timer: number = 0;\r\n\r\n    return function(this: { delay: number }, ...args: any[]) {\r\n        if (timer) window.clearTimeout(timer);\r\n        timer = window.setTimeout(() => {\r\n            timer = 0;\r\n            action(...args);\r\n        }, delay) as number;\r\n    }\r\n}\r\n","import * as React from \"react\"\nimport \"../theme.css\"\nimport \"./input-date.css\"\nimport castInteger from \"../converter/integer\"\nimport castBoolean from \"../converter/boolean\"\nimport castString from \"../converter/string\"\nimport Debouncer from \"../debouncer\"\n\nimport Intl from \"../intl\"\nconst _ = Intl.make(require(\"./input-date.yaml\"));\n\ninterface INumberSlot {\n    (value: number): void;\n}\n\ninterface IInputProps {\n    label?: string;\n    value?: number;\n    wide?: boolean;\n    focus?: boolean;\n    onChange?: INumberSlot\n}\n\ninterface IInputState {\n    error?: string;\n}\n\nexport default class Input extends React.Component<IInputProps, IInputState> {\n    readonly inputDay: React.RefObject<HTMLInputElement>;\n    readonly inputMonth: React.RefObject<HTMLSelectElement>;\n    readonly inputYear: React.RefObject<HTMLInputElement>;\n\n    constructor(props: IInputProps) {\n        super(props);\n        this.state = {};\n        this.handleChange = Debouncer(this.handleChange.bind(this), 300);\n        this.inputDay = React.createRef();\n        this.inputMonth = React.createRef();\n        this.inputYear = React.createRef();\n    }\n\n    handleChange(): void {\n        try {\n            const day = parseInt(this.inputDay.current.value);\n            if (isNaN(day)) throw \"day is not a number!\";\n            const month = parseInt(this.inputMonth.current.value);\n            if (isNaN(month)) throw \"month is not a number!\";\n            const year = parseInt(this.inputYear.current.value);\n            if (isNaN(year)) throw \"year is not a number!\";\n\n            const date = new Date(year, month, day);\n            if (date.getFullYear() !== year || date.getMonth() !== month || date.getDate() !== day) {\n                throw \"Invalid date!\";\n            }\n            this.setState({ error: \"\" });\n\n            const handler = this.props.onChange;\n            if (typeof handler !== 'function') return;\n            handler(date.getTime());\n        }\n        catch (ex) {\n            this.setState({ error: _(\"invalid\") });\n        }\n    }\n\n    render() {\n        const\n            p = this.props,\n            label = castString(p.label, \"\"),\n            value = castInteger(p.value, 0),\n            wide = castBoolean(p.wide, false),\n            error = castString(this.state.error, \"\"),\n            date = new Date(value),\n            id = nextId();\n        const classes = [\"tfw-view-input-date\", \"thm-ele-button\"];\n        if (wide) classes.push(\"wide\");\n        const header = (error.length > 0 ? <div className=\"thm-bgSD error\">{error}</div> :\n            (label ? (<label htmlFor={id} className=\"thm-bgPD\">{label}</label>) : null));\n        return (<div className={classes.join(\" \")} >\n            {header}\n            <div className=\"inputs\">\n                <input\n                    ref={this.inputDay}\n                    className=\"day\"\n                    type=\"number\"\n                    maxLength=\"2\"\n                    min=\"1\"\n                    max=\"31\"\n                    id={id}\n                    size=\"2\"\n                    onChange={this.handleChange}\n                    defaultValue={date.getDate()} />\n                <select ref={this.inputMonth}\n                    onChange={this.handleChange}\n                    defaultValue={date.getMonth()}>{\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(monthId => (\n                            <option key={monthId} value={monthId}>{_(`month-${monthId}`)}</option>\n                        ))\n                    }</select>\n                <input\n                    ref={this.inputYear}\n                    className=\"year\"\n                    type=\"number\"\n                    maxLength=\"4\"\n                    size=\"4\"\n                    onChange={this.handleChange}\n                    defaultValue={date.getFullYear()} />\n            </div>\n        </div>);\n    }\n}\n\n\nlet globalId = 0;\nfunction nextId() {\n    return `tfw-view-input-${globalId++}`;\n}\n\n\nconst NUMBER_VALIDATOR = (value: string) => isNaN(parseFloat(value)) ? _('nan') : true;\n","import React from \"react\"\r\nimport castArray from \"../tfw/converter/array\"\r\nimport castString from \"../tfw/converter/string\"\r\nimport castInteger from \"../tfw/converter/integer\"\r\nimport Flex from \"../tfw/layout/flex\"\r\nimport Combo from \"../tfw/view/combo\"\r\nimport InputDate from \"../tfw/view/input-date\"\r\nimport StatsPatientsConfig from \"../container/stats-patients-config\"\r\nimport { IStatsConfig } from \"../types\"\r\nimport _ from \"../intl\"\r\n\r\ninterface IStatsConfigProps extends IStatsConfig {\r\n    onTypeChange?: (type: string) => void;\r\n    onDateMinChange?: (date: number) => void;\r\n    onDateMaxChange?: (date: number) => void;\r\n}\r\n\r\nexport default class StatsConfig extends React.Component<IStatsConfigProps, {}> {\r\n    constructor(props: IStatsConfigProps) {\r\n        super(props);\r\n        this.handleTypeChange = this.handleTypeChange.bind(this);\r\n        this.handleDateMinChange = this.handleDateMinChange.bind(this);\r\n        this.handleDateMaxChange = this.handleDateMaxChange.bind(this);\r\n    }\r\n\r\n    handleTypeChange(index: number) {\r\n        const handler = this.props.onTypeChange;\r\n        if (typeof handler !== 'function') return;\r\n        handler(index === 0 ? 'patients' : 'consultations');\r\n    }\r\n\r\n    handleDateMinChange(date: number) {\r\n        const handler = this.props.onDateMinChange;\r\n        if (typeof handler !== 'function') return;\r\n        try {\r\n            handler(date);\r\n        } catch (ex) {\r\n            console.error(\"Error in handleDateMinChange(date): \", date);\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    handleDateMaxChange(date: number) {\r\n        const handler = this.props.onDateMaxChange;\r\n        if (typeof handler !== 'function') return;\r\n        try {\r\n            handler(date);\r\n        } catch (ex) {\r\n            console.error(\"Error in handleDateMaxChange(date): \", date);\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const p = this.props;\r\n        const type = castString(p.statsType, \"consultations\");\r\n        const dateMin = castInteger(p.dateMin, Date.now());\r\n        const dateMax = castInteger(p.dateMax, Date.now());\r\n        const types = [\"consultations\", \"patients\"];\r\n\r\n        return (<div>\r\n            <Combo\r\n                wide={true}\r\n                label={_(\"stat-type\")}\r\n                keys={types}\r\n                value={type}\r\n            >{\r\n                    types.map(type => (\r\n                        <div key={type}>{_(type)}</div>\r\n                    ))\r\n                }</Combo>\r\n            <Flex>\r\n                <div><InputDate\r\n                    label={_(\"date-min\")}\r\n                    onChange={this.handleDateMinChange}\r\n                    value={dateMin} /></div>\r\n                <div><InputDate\r\n                    label={_(\"date-max\")}\r\n                    onChange={this.handleDateMaxChange}\r\n                    value={dateMax} /></div>\r\n            </Flex>\r\n        </div>);\r\n        /*\r\n        return (\r\n            <Tabstrip\r\n                value={value}\r\n                headers={[_(\"patients\"), _(\"consultations\")]}\r\n                onChange={this.handleTypeChange}\r\n            >\r\n                <StatsPatientsConfig\r\n                    dateMin={dateMin}\r\n                    dateMax={dateMax} />\r\n                <div>Not implemented yet!</div>\r\n            </Tabstrip>\r\n        )*/\r\n    }\r\n}\r\n","import { connect } from 'react-redux'\nimport StatsConfig from \"../presentational/stats-config\"\nimport Actions from \"../state/stats-config\"\nimport { IState, IDispatchFunction } from \"../types\"\n\nfunction mapStateToProps(state: IState) {\n    return {\n        statsType: state.statsConfig.statsType,\n        dateMin: state.statsConfig.dateMin,\n        dateMax: state.statsConfig.dateMax\n    }\n}\n\nfunction mapDispatchToProps(dispatch: IDispatchFunction) {\n    return {\n        onTypeChange(type: \"patients\" | \"consultations\") {\n            dispatch(Actions.setType(type));\n        },\n\n        onDateMinChange(date: number) {\n            console.info(\"[onDateMinChange] date=\", date);\n            dispatch(Actions.setDateMin(date));\n        },\n\n        onDateMaxChange(date: number) {\n            dispatch(Actions.setDateMax(date));\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatsConfig);\n","import * as React from \"react\"\r\nimport { Provider } from 'react-redux'\r\nimport State from \"../state\"\r\nimport StatsConfig from \"../container/stats-config\"\r\nimport Dialog from \"../tfw/factory/dialog\"\r\nimport Button from \"../tfw/view/button\"\r\n\r\nimport _ from \"../intl\"\r\n\r\nexport default {\r\n    show() {\r\n        const dialog = Dialog.show({\r\n            closeOnEscape: true,\r\n            icon: \"stat\",\r\n            title: _(\"create-stat\"),\r\n            content: (<Provider store={State.store}><StatsConfig /></Provider>),\r\n            footer: [\r\n                <Button\r\n                    key=\"cancel\"\r\n                    label={_(\"cancel\")}\r\n                    flat={true}\r\n                    onClick={() => dialog.hide()} />,\r\n                <Button\r\n                    key=\"ok\"\r\n                    label={_(\"create-stat\")}\r\n                    warning={true}\r\n                    onClick={() => {\r\n                        dialog.hide();\r\n                        State.dispatch(State.addStat());\r\n                    }} />\r\n            ]\r\n        });\r\n\r\n    }\r\n}\r\n","import { connect } from 'react-redux'\nimport CarecenterHeader from \"../presentational/carecenter-header\"\nimport { IState, ICarecenter, IDispatchFunction } from \"../types\"\nimport State from \"../state\"\nimport StatsConfigDialog from \"../dialog/stats-config\"\n\nfunction mapStateToProps(state: IState) {\n    return {}\n}\n\nfunction mapDispatchToProps(dispatch: IDispatchFunction) {\n    return {\n        onStatClick(carecenter: ICarecenter) {\n            console.log(\"carecenter=\", carecenter);\n            dispatch(State.initStatsConfig(carecenter.id));\n            StatsConfigDialog.show();\n        },\n\n        onStructClick(carecenter: ICarecenter) {\n            console.log(\"carecenter=\", carecenter);\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CarecenterHeader);\n","import * as React from \"react\"\r\nimport castArray from \"../tfw/converter/array\"\r\nimport castInteger from \"../tfw/converter/integer\"\r\nimport \"./pie.css\"\r\n\r\ninterface IPieProps {\r\n    values: number[];\r\n    colors?: string[];\r\n    size?: number;\r\n}\r\ninterface IPieState { }\r\n\r\nconst DEFAULT_COLORS = [\"#b37036\", \"#cc7529\", \"#e67717\", \"#ff7700\", \"#765\"];\r\n\r\nexport default class Pie extends React.Component<IPieProps, IPieState> {\r\n    private readonly canvas: React.RefObject<HTMLCanvasElement> = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.paint();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.paint();\r\n    }\r\n\r\n    paint() {\r\n        if (!this.canvas.current) return;\r\n        const\r\n            canvas: HTMLCanvasElement = this.canvas.current,\r\n            values = this.props.values,\r\n            colors = castArray(this.props.colors, DEFAULT_COLORS).slice(),\r\n            size = canvas.width,\r\n            lineWidth = 1,\r\n            radius = Math.floor(size / 2) - 3,\r\n            turn = 2 * Math.PI,\r\n            angleStep = turn / size,\r\n            total = this.props.values.reduce((acc, val) => val + acc),\r\n            ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) return;\r\n        let\r\n            angle = 0,\r\n            angleTarget = 0;\r\n\r\n        const lineTo = (ang: number) => ctx.lineTo(radius * Math.sin(ang), -radius * Math.cos(ang));\r\n\r\n        ctx.save();\r\n        ctx.clearRect(0, 0, size, size);\r\n        if (total > 0) {\r\n            ctx.translate(size / 2, size / 2);\r\n            ctx.fillStyle = \"#000\";\r\n            ctx.globalAlpha = 0.5;\r\n            ctx.ellipse(0, 0, size / 2, size / 2, 0, 0, Math.PI * 2);\r\n            ctx.fill();\r\n            ctx.strokeStyle = \"#000\";\r\n            ctx.lineWidth = lineWidth;\r\n            for (let i = 0; i < colors.length; i++) {\r\n                const color = colors[i % colors.length];\r\n                ctx.fillStyle = color;\r\n                ctx.beginPath();\r\n                ctx.moveTo(0, 0);\r\n                angleTarget = angle + turn * values[i] / total;\r\n                do {\r\n                    lineTo(angle);\r\n                    angle += angleStep;\r\n                } while (angle < angleTarget)\r\n                lineTo(angleTarget);\r\n                angle = angleTarget;\r\n                ctx.closePath();\r\n                ctx.globalAlpha = 1;\r\n                ctx.fill();\r\n                ctx.globalAlpha = 0.2;\r\n                ctx.stroke();\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    render() {\r\n        const p = this.props;\r\n        const colors = castArray(p.colors, DEFAULT_COLORS);\r\n        const size = castInteger(p.size, 200);\r\n\r\n        return (\r\n            <canvas\r\n                ref={this.canvas}\r\n                width={size} height={size}\r\n                className=\"presentation-pie\">\r\n            </canvas>\r\n        );\r\n    }\r\n}\r\n","import WebService from \"../tfw/web-service\"\r\nimport { IStatsConfig, IOccurences, IOccurence } from \"../types\"\r\n\r\ninterface IServiceExtract {\r\n    patients: {};\r\n    data: {};\r\n}\r\n\r\ninterface IOccurencesDictionary {\r\n    [key: string]: { [key: string]: number }\r\n}\r\n\r\nexport default {\r\n    async extract(statsConfig: IStatsConfig): Promise<{}> {\r\n        const extraction = await WebService.exec(\"extract\", {\r\n            carecenter: statsConfig.carecenter.id,\r\n            begin: convertTime(statsConfig.dateMin),\r\n            end: convertTime(statsConfig.dateMax)\r\n        });\r\n        const result = {};\r\n        Object.values(extraction.data).forEach(consultation => {\r\n            Object.keys(consultation)\r\n                .filter(key => key.charAt(0) === '#')\r\n                .forEach(key => {\r\n                    const val = consultation[key];\r\n                    if (typeof result[key] === 'undefined') {\r\n                        result[key] = {};\r\n                    }\r\n                    const item = result[key];\r\n                    const occurences = item[val];\r\n                    if (typeof occurences === 'undefined') {\r\n                        item[val] = 1;\r\n                    } else {\r\n                        item[val]++;\r\n                    }\r\n                })\r\n        })\r\n        return convertIntoOccurences(result);\r\n    }\r\n}\r\n\r\n/**\r\n * Convert a number of milliseconds into a number of seconds.\r\n */\r\nfunction convertTime(milliseconds: number): number {\r\n    return Math.floor(.5 + milliseconds * 0.001);\r\n}\r\n\r\n\r\nfunction convertIntoOccurences(input: IOccurencesDictionary): { [key: string]: IOccurences } {\r\n    const result: { [key: string]: IOccurences } = {};\r\n    Object.keys(input).forEach(fieldName => {\r\n        const occurences = { sum: 0, occ: [] };\r\n        result[fieldName] = occurences;\r\n        const fieldValues = input[fieldName];\r\n        Object.keys(fieldValues).forEach(value => {\r\n            const occ = fieldValues[value];\r\n            occurences.sum += occ;\r\n            occurences.occ.push([value, occ]);\r\n        })\r\n        occurences.occ.sort(sortDescBySecondElement);\r\n    })\r\n    return result;\r\n}\r\n\r\n\r\nfunction sortDescBySecondElement(a: IOccurence, b: IOccurence): number {\r\n    const\r\n        A = a[1],\r\n        B = b[1];\r\n    return B - A;\r\n}\r\n","import * as React from \"react\"\r\nimport { IStatsConfig, IStructure, IOccurences } from \"../types\"\r\nimport Pie from \"./pie\"\r\nimport Flex from \"../tfw/layout/flex\"\r\nimport Icon from \"../tfw/view/icon\"\r\nimport Combo from \"../tfw/view/combo\"\r\nimport Button from \"../tfw/view/button\"\r\nimport FileAPI from \"../tfw/fileapi\"\r\nimport Structure from \"../structure\"\r\nimport StatService from \"../service/stat\"\r\n\r\nimport Intl from \"../tfw/intl\"\r\nconst _ = Intl.make(require(\"./stat.yaml\"));\r\n\r\nimport \"./stat.css\"\r\n\r\nconst DEFAULT_COLORS = [\"#b37036\", \"#cc7529\", \"#e67717\", \"#ff7700\", \"#765\"];\r\n\r\ntype TDataFromService = { [key: string]: IOccurences };\r\n\r\ninterface IStatProps {\r\n    stat: IStatsConfig;\r\n    structure: IStructure;\r\n    onClose?: () => void;\r\n}\r\n\r\ninterface IStatState {\r\n    dataFromService?: TDataFromService;\r\n    selectedField: string;\r\n}\r\n\r\nexport default class Stat extends React.Component<IStatProps, IStatState> {\r\n    constructor(props: IStatProps) {\r\n        super(props);\r\n        this.state = { selectedField: \"\" };\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n    handleClose() {\r\n        const handler = this.props.onClose;\r\n        if (typeof handler !== 'function') return;\r\n        try {\r\n            handler();\r\n        } catch (ex) {\r\n            console.error(\"Error in handleClose(): \", );\r\n            console.error(ex);\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.dataFromService) return;\r\n        console.log(\"componentDidUpdate\");\r\n        this.refresh();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"componentDidMount\");\r\n        this.refresh();\r\n    }\r\n\r\n    async refresh() {\r\n        const dataFromService = await StatService.extract(this.props.stat);\r\n        console.info(\"data=\", dataFromService);\r\n        this.setState({ dataFromService });\r\n    }\r\n\r\n    private export() {\r\n        const data: TDataFromService | undefined = this.state.dataFromService;\r\n        if (!data) return;\r\n        const { keys, values } = getFieldsKeysAndValues(data, this.props.structure);\r\n        const output: string[] = [\"Code du champ\\tNom du champ\\tValeur\\tOccurences\"];\r\n        keys.forEach((fieldKey: string, idx: number) => {\r\n            const fieldCaption = values[idx];\r\n            const occurences = data[fieldKey].occ;\r\n            occurences.forEach(([caption, count]: [string, number]) => {\r\n                output.push(`${fieldKey}\\t${fieldCaption}\\t${caption}\\t${count}`);\r\n            })\r\n        });\r\n\r\n        const filename = \"statistics.xls\";\r\n        FileAPI.saveAs(new Blob([output.join(\"\\n\")], { type: \"text/csv\" }), filename);\r\n    }\r\n\r\n    render() {\r\n        const data: TDataFromService | undefined = this.state.dataFromService;\r\n        let content = null;\r\n        if (!data) {\r\n            content = (<Flex>\r\n                <Icon content=\"wait\" animate={true} /><div>{\"Chargement en cours...\"}</div>\r\n            </Flex>);\r\n        } else {\r\n            const { keys, values } = getFieldsKeysAndValues(data, this.props.structure);\r\n            let value = this.state.selectedField;\r\n            if (keys.indexOf(value) === -1) value = keys[0];\r\n            const occurences = data[value];\r\n            if (!occurences) {\r\n                content = <div>{_(\"no-data\")}</div>;\r\n            } else {\r\n                content = (<div>\r\n                    <Combo\r\n                        keys={keys}\r\n                        onChange={selectedField => {\r\n                            console.info(\"[onChange] selectedField=\", selectedField);\r\n                            this.setState({ selectedField });\r\n                        }}\r\n                        value={value}>{\r\n                            values.map((val, idx) => {\r\n                                const key = keys[idx];\r\n                                return <div key={key}><b>{`${val} `}</b><small className='grey'>{key}</small></div>\r\n                            })\r\n                        }</Combo>\r\n                    <br />\r\n                    <center>\r\n                        <Pie colors={DEFAULT_COLORS}\r\n                            values={getValuesForPie(occurences)} />\r\n                    </center>\r\n                    <div>{\r\n                        occurences.occ.map(([caption, count], index) => {\r\n                            const colorIndex = Math.min(DEFAULT_COLORS.length - 1, index);\r\n                            const color = DEFAULT_COLORS[colorIndex];\r\n                            return (\r\n                                <Flex key={index}\r\n                                    justifyContent=\"space-between\"\r\n                                    alignItems=\"center\"\r\n                                    dir=\"row\"\r\n                                    classes={index % 2 ? \"thm-bg1\" : \"thm-bg2\"}>\r\n                                    <Flex\r\n                                        justifyContent=\"space-between\"\r\n                                        wide={false}\r\n                                        dir=\"row\"\r\n                                        alignItems=\"center\">\r\n                                        <div className=\"bullet\" style={{\r\n                                            background: color\r\n                                        }}></div>\r\n                                        <span>{caption}</span>\r\n                                    </Flex>\r\n                                    <div><b>{count}</b></div>\r\n                                </Flex>\r\n                            )\r\n                        })\r\n                    }</div>\r\n                    <Button\r\n                        wide={true}\r\n                        icon=\"export\"\r\n                        label={_(\"export\")}\r\n                        onClick={() => this.export()} />\r\n                </div >);\r\n            }\r\n        }\r\n\r\n        const stat: IStatsConfig = this.props.stat;\r\n        return (\r\n            <div className=\"presentational-stat thm-ele-card thm-bg1\">\r\n                <div className=\"thm-bgPD\">{`${stat.carecenter.name}, du ${formatDate(stat.dateMin)} au ${formatDate(stat.dateMax)}`}</div>\r\n                <div>{content}</div>\r\n                <hr />\r\n                <Flex dir=\"row\" justifyContent=\"flex-end\">\r\n                    <Button\r\n                        onClick={this.handleClose}\r\n                        icon=\"close\"\r\n                        label={_(\"close\")}\r\n                        flat={true} />\r\n                </Flex>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction getFieldsKeysAndValues(data: TDataFromService, structure: IStructure): { keys: string[], values: string[] } {\r\n    const keys = Object.keys(data);\r\n    const values = keys.map(key => Structure.getFieldCaption(key, structure));\r\n    const array = keys.map((key, index) => [key, values[index]]);\r\n    array.sort((a, b) => {\r\n        const A = a[1];\r\n        const B = b[1];\r\n        if (A < B) return -1;\r\n        if (A > B) return +1;\r\n        return 0;\r\n    });\r\n\r\n    return {\r\n        keys: array.map(item => item[0]),\r\n        values: array.map(item => item[1])\r\n    };\r\n}\r\n\r\nfunction formatDate(date: number): string {\r\n    const d = new Date(date);\r\n    return `${d.getDate()}-${1 + d.getMonth()}-${d.getFullYear()}`;\r\n}\r\n\r\n\r\nfunction getValuesForPie(occurences: IOccurences, sectors: number = 4): number[] {\r\n    const { sum, occ } = occurences;\r\n    const values: number[] = [];\r\n    let total = 0;\r\n    for (let i = 0; i < Math.min(sectors, occ.length); i++) {\r\n        const [, count] = occ[i];\r\n        values.push(count);\r\n        total += count;\r\n    }\r\n    if (sum > total) values.push(sum - total);\r\n    return values;\r\n}\r\n","import React from \"react\"\nimport castArray from \"../converter/array\"\nimport castString from \"../converter/string\"\nimport castBoolean from \"../converter/boolean\"\nimport Button from \"../view/button\"\nimport Gesture from \"../gesture\"\nimport \"./sidemenu.css\"\n\ninterface ISidemenuProps {\n    show?: boolean;\n    head?: string;\n    menu?: React.ReactElement<HTMLDivElement>;\n    body?: React.ReactElement<HTMLDivElement>;\n    classes?: string[] | string;\n    onShowChange?: (isMenuVisible: boolean) => void;\n}\n\nexport default class Sidemenu extends React.Component<ISidemenuProps, {}> {\n    refMenu = React.createRef<HTMLDivElement>();\n\n    constructor(props: ISidemenuProps) {\n        super(props);\n        this.handleShowChange = this.handleShowChange.bind(this);\n    }\n\n    componentDidMount() {\n        const menu = this.refMenu.current;\n        if (!menu) return;\n        Gesture(menu).on({\n            swipeleft: () => {\n                const handler = this.props.onShowChange;\n                if (typeof handler === 'function') handler(false);\n            }\n        });\n    }\n    handleShowChange() {\n        const handler = this.props.onShowChange;\n        if (typeof handler !== 'function') return;\n        handler(!castBoolean(this.props.show, window.innerWidth > 480));\n    }\n\n    render() {\n        const show = castBoolean(this.props.show, window.innerWidth > 480);\n        const head = castString(this.props.head, \"\");\n        const classes = [\"tfw-layout-sidemenu thm-bg0\"].concat(castArray(this.props.classes));\n        if (show) classes.push(\"show\");\n\n        return (\n            <div className={classes.join(\" \")} >\n                <div className=\"body thm-bg0\" >{this.props.body}</div>\n                <div className=\"menu thm-ele-nav thm-bg1\" ref={this.refMenu}>\n                    <header className=\"thm-ele-nav thm-bgPD\" >{head}</header>\n                    <menu> {this.props.menu} </menu>\n                </div>\n                <div className=\"icon thm-bgPD\" >\n                    <Button icon=\"menu\" flat={true} onClick={this.handleShowChange} />\n                </div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\"\nimport { connect } from 'react-redux'\nimport CarecenterHeader from \"./carecenter-header\"\nimport Stat from \"../presentational/stat\"\nimport Sidemenu from \"../tfw/layout/sidemenu\"\nimport Icon from \"../tfw/view/icon\"\nimport Flex from \"../tfw/layout/flex\"\nimport Button from \"../tfw/view/button\"\nimport User from \"../state/user\"\nimport State from \"../state\"\nimport Hash from \"../util/hash\"\nimport { IState, IDispatchFunction, IOrganization, ICarecenter } from \"../types\"\nimport _ from \"../intl\";\n\nimport \"./sidemenu.css\"\n\nfunction mapStateToProps(state: IState) {\n    const stats = state.stats.map(stat => {\n        const carecenter = stat.carecenter;\n        const structureId = carecenter.id;\n        const structure = state.structures.find(s => s.id === structureId);\n        if (!structure) {\n            console.error(`There is no Structure with id=${structureId} in carecenter \"${carecenter.name}\"!`);\n            return null;\n        }\n        const key = Hash.statsConfig(stat);\n        return (<Stat key={key}\n            stat={stat}\n            onClose={() => State.dispatch(State.removeStat(key))}\n            structure={structure} />);\n    });\n    return {\n        head: state.user.nickname,\n        menu: (<div>\n            <ul>{state.organizations.map((organization: IOrganization) => (\n                <li key={organization.id}>{organization.name}<ul>{\n                    state.carecenters.filter((carecenter: ICarecenter) =>\n                        carecenter.organizationId === organization.id)\n                        .map((carecenter: ICarecenter) => (\n                            <CarecenterHeader\n                                key={carecenter.id}\n                                carecenter={carecenter}\n                                structures={state.structures} />\n                        ))\n                }</ul></li>\n            ))\n            }</ul>\n            <br /><hr /><br />\n            <Button label={_(\"logout\")} icon=\"logout\" wide={true}\n                onClick={() => window.location.reload()} />\n        </div>),\n        body: stats.length > 0 ? stats : (\n            <Flex\n                dir=\"column\"\n                alignItems=\"center\"\n                classes={[\"container-sidemenu\", \"welcome\"]}\n            >\n                <div>{_(\"welcome\")}</div>\n                <Icon content=\"stat\" />\n                <div>{_(\"report\")}</div>\n                <Icon content=\"report\" />\n            </Flex>\n        )\n    }\n}\n\nfunction mapDispatchToProps(dispatch: IDispatchFunction) {\n    return {\n        onLanguageClick() {\n            dispatch(User.setLanguage(\"jp\"));\n        },\n\n        onLogoutClick() {\n            window.location.reload();\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidemenu);\n","import * as React from \"react\"\n\nimport { IUser } from \"./types\"\nimport Sidemenu from \"./container/sidemenu\"\n\nimport \"./App.css\"\n\ninterface IAppProps {\n    user: IUser\n}\n\nexport default class App extends React.Component<IAppProps, {}> {\n    render() {\n        return <Sidemenu classes=\"App\" />\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport State from \"./state\"\nimport Intl from \"./tfw/intl\";\nimport { IUser, IOrganization, ICarecenter, IStructure } from \"./types\"\nimport ServiceOrganization from \"./service/organization\"\nimport ServiceCarecenter from \"./service/carecenter\"\nimport ServiceStructure from \"./service/structure\"\n\nimport App from \"./App\";\n\nexport default {\n    async start(user: IUser) {\n        const root = document.getElementById(\"root\");\n        ReactDOM.render(\n            <Provider store={State.store}><App user={user} /></Provider>,\n            root);\n        State.dispatch(State.User.setLanguage(Intl.lang));\n        State.dispatch(State.User.setNickname(user.nickname));\n        const organizations = await ServiceOrganization.list();\n        State.dispatch(State.Organizations.setOrganizations(organizations));\n        State.dispatch(State.Carecenters.setCarecenters([]));\n        organizations.forEach(async (organization: IOrganization) => {\n            const structures = await ServiceStructure.list(organization.id);\n            structures.forEach((structure: IStructure) => {\n                State.dispatch(State.Structures.addStructure(structure));\n            });\n            const carecenters = await ServiceCarecenter.list(organization.id);\n            carecenters.forEach((carecenter: ICarecenter) => {\n                State.dispatch(State.Carecenters.addCarecenter(carecenter));\n            });\n        })\n    }\n}\n"],"sourceRoot":""}